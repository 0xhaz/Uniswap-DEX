{
  "address": "0xc6e7DF5E7b4f2A278906862b61205850344D4e7d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token1",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount1",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kLast",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price0CumulativeLast",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price1CumulativeLast",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserve0",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserve1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb50fec1774f6cc04537371d3df7b3be4a9c0bb8f776fdeffaa5e7d8ae0fc000f",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xc6e7DF5E7b4f2A278906862b61205850344D4e7d",
    "transactionIndex": 0,
    "gasUsed": "1142389",
    "logsBloom": "0x
    "blockHash": "0x7b7f7e4f56fe54b5e31e22c64bf5504c70c1d6d266d4bac700cbb213271dd53c",
    "transactionHash": "0xb50fec1774f6cc04537371d3df7b3be4a9c0bb8f776fdeffaa5e7d8ae0fc000f",
    "logs": [],
    "blockNumber": 21,
    "cumulativeGasUsed": "1142389",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853"
  ],
  "numDeployments": 1,
  "solcInputHash": "acc13089f797137177193d1b80b54b89",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount1\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price0CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/SwapPairTokens2.sol\":\"SwapPairTokens2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/SwapPairTokens2.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\nimport \\\"./SwapTokens.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\ncontract SwapPairTokens2 is SwapTokens {\\n    IERC20 public immutable token0;\\n    IERC20 public immutable token1;\\n\\n    // tracks the internal balances of the pool\\n    uint256 public reserve0;\\n    uint256 public reserve1;\\n\\n    uint256 public price0CumulativeLast;\\n    uint256 public price1CumulativeLast;\\n    uint256 public kLast;\\n\\n    constructor(address _token0, address _token1) {\\n        token0 = IERC20(_token0);\\n        token1 = IERC20(_token1);\\n    }\\n\\n    // swap tokens\\n    function swap(\\n        address _tokenIn,\\n        uint256 _amountIn\\n    ) external returns (uint256 amountOut) {\\n        require(\\n            _tokenIn == address(token0) || _tokenIn == address(token1),\\n            \\\"INVALID TOKEN\\\"\\n        );\\n        require(_amountIn > 0, \\\"INSUFFICIENT INPUT AMOUNT\\\");\\n\\n        bool isToken0 = _tokenIn == address(token0);\\n\\n        // assigning the tokens to the correct variables\\n        (\\n            IERC20 tokenIn,\\n            IERC20 tokenOut,\\n            uint256 reserveIn,\\n            uint256 reserveOut\\n        ) = isToken0\\n                ? (token0, token1, reserve0, reserve1)\\n                : (token1, token0, reserve1, reserve0);\\n\\n        // transferring the tokens from the sender to the contract\\n        tokenIn.transferFrom(msg.sender, address(this), _amountIn);\\n\\n        // fee calculation of 0.3%\\n        uint256 _amountInWithFee = (_amountIn * 997) / 1000;\\n\\n        /**\\n         * ydx / (x + dx) = dy\\n         * y = reserveOut, dy = _amountOut\\n         * x = reserveIn, dx = _amountInWithFee\\n         */\\n        amountOut =\\n            (reserveOut * _amountInWithFee) /\\n            (reserveIn + _amountInWithFee);\\n\\n        // tokenOut transfer to the sender\\n        tokenOut.transfer(msg.sender, amountOut);\\n\\n        // updating the reserves\\n        _update(\\n            token0.balanceOf(address(this)),\\n            token1.balanceOf(address(this))\\n        );\\n    }\\n\\n    function addLiquidity(\\n        uint256 _amount0,\\n        uint256 _amount1\\n    ) external returns (uint256 shares) {\\n        token0.transferFrom(msg.sender, address(this), _amount0);\\n        token1.transferFrom(msg.sender, address(this), _amount1);\\n\\n        if (reserve0 > 0 || reserve1 > 0) {\\n            require(\\n                reserve0 * _amount1 == reserve1 * _amount0,\\n                \\\"x / y != dx / dy\\\"\\n            );\\n        }\\n\\n        if (totalSupply == 0) {\\n            shares = _sqrt(_amount0 * _amount1);\\n        } else {\\n            // whichever value is the minimum will be the shares of (dx * T / x) or (dy * T / y\\n            shares = _min(\\n                (_amount0 * totalSupply) / reserve0,\\n                (_amount1 * totalSupply) / reserve1\\n            );\\n        }\\n    }\\n\\n    function removeLiquidity(\\n        uint256 _shares\\n    ) external returns (uint256 amount0, uint256 amount1) {\\n        uint256 bal0 = token0.balanceOf(address(this));\\n        uint256 bal1 = token1.balanceOf(address(this));\\n\\n        // calculating the amount of tokens to be transferred\\n        amount0 = (bal0 * _shares) / totalSupply;\\n        amount1 = (bal1 * _shares) / totalSupply;\\n        require(amount0 > 0 && amount1 > 0, \\\"INSUFFICIENT LIQUIDITY\\\");\\n\\n        // burning the shares and updating the reserves\\n        _burn(msg.sender, _shares);\\n        _update(bal0 - amount0, bal1 - amount1);\\n\\n        // transferring the tokens to the sender\\n        token0.transfer(msg.sender, amount0);\\n        token1.transfer(msg.sender, amount1);\\n    }\\n\\n    // to update the reserver of the pool\\n    function _update(uint256 _reserve0, uint256 _reserve1) private {\\n        require(\\n            _reserve0 <= type(uint112).max && _reserve1 <= type(uint112).max,\\n            \\\"OVERFLOW\\\"\\n        );\\n        reserve0 = _reserve0;\\n        reserve1 = _reserve1;\\n    }\\n\\n    // to calculate the square root of the number\\n    function _sqrt(uint256 y) private pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    // to find the minimum of the two numbers\\n    function _min(uint256 x, uint256 y) private pure returns (uint256) {\\n        return x = x <= y ? x : y;\\n    }\\n}\\n\",\"keccak256\":\"0x5799c94968d18565cbb1098a8be324c0eb48a01cb02184ab913263c144dca4d2\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/core/SwapTokens.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\nimport \\\"../libraries/safeMath.sol\\\";\\n\\ncontract SwapTokens {\\n    using SafeMath for uint256;\\n\\n    string public constant name = \\\"SwapTokens\\\";\\n    string public constant symbol = \\\"SWT\\\";\\n    uint8 public constant decimals = 18;\\n\\n    uint256 public totalSupply;\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n    mapping(address => uint256) public nonces;\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool) {\\n        _approve(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    function transfer(address _to, uint256 _value) external returns (bool) {\\n        _transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 value\\n    ) external returns (bool) {\\n        // set infinite approval if allowance is max\\n        // otherwise decrease allowance\\n        if (\\n            allowance[_from][msg.sender] != type(uint256).max &&\\n            allowance[_from][msg.sender] != 0\\n        ) {\\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(\\n                value\\n            );\\n        }\\n\\n        _transfer(_from, _to, value);\\n        return true;\\n    }\\n\\n    function _transfer(address _from, address _to, uint256 value) private {\\n        balanceOf[_from] = balanceOf[_from].sub(value);\\n        balanceOf[_to] = balanceOf[_to].add(value);\\n        emit Transfer(_from, _to, value);\\n    }\\n\\n    function _approve(\\n        address _owner,\\n        address _spender,\\n        uint256 _value\\n    ) private {\\n        require(_spender != address(0), \\\"Spender cannot be 0 address\\\");\\n        require(_owner != address(0), \\\"Owner cannot be 0 address\\\");\\n\\n        allowance[_owner][_spender] = _value;\\n        emit Approval(_owner, _spender, _value);\\n    }\\n\\n    function _mint(address _to, uint256 _value) internal {\\n        totalSupply = totalSupply.add(_value);\\n        balanceOf[_to] = balanceOf[_to].add(_value);\\n        emit Transfer(address(0), _to, _value);\\n    }\\n\\n    function _burn(address _from, uint256 _value) internal {\\n        balanceOf[_from] = balanceOf[_from].sub(_value);\\n        totalSupply = totalSupply.sub(_value);\\n        emit Transfer(_from, address(0), _value);\\n    }\\n}\\n\",\"keccak256\":\"0xb3339961954c756df1c7067569320458b02e49a12c7a8ddf8d6a646b1473d965\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\ninterface IERC20 {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function decimals() external view returns (uint256);\\n\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    function allowance(\\n        address _owner,\\n        address _spender\\n    ) external view returns (uint256);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x239f47b2f966a01ac0f60503dec17b3d50e7bd5aaaea4f3fe8c79909d9da3f90\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/libraries/safeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x15e9fa47b61bcebc09264ecb978e4e665572320d43f75a5799125f21a2de80bc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b506040516114db3803806114db83398101604081905261002f91610062565b6001600160a01b039182166080521660a052610095565b80516001600160a01b038116811461005d57600080fd5b919050565b6000806040838503121561007557600080fd5b61007e83610046565b915061008c60208401610046565b90509250929050565b60805160a0516113b86101236000396000818161030b015281816104e5015281816106b4015281816107ee0152818161098b01528181610a9101528181610aff0152610cf80152600081816101980152818161045701528181610622015281816107560152818161095001528181610a4f01528181610ab201528181610ade0152610c7001526113b86000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806370a08231116100ad5780639cd441da116100715780639cd441da146102cd578063a9059cbb146102e0578063d004f0f7146102f3578063d21220a714610306578063dd62ed3e1461032d57600080fd5b806370a082311461023a5780637464fc3d1461025a5780637ecebe001461026357806395d89b41146102835780639c8f9f23146102a557600080fd5b8063313ce567116100f4578063313ce567146101fc578063443cb4bc146102165780635909c0d51461021f5780635a3d5493146102285780635a76f25e1461023157600080fd5b806306fdde0314610131578063095ea7b3146101705780630dfe16811461019357806318160ddd146101d257806323b872dd146101e9575b600080fd5b61015a6040518060400160405280600a81526020016953776170546f6b656e7360b01b81525081565b604051610167919061117e565b60405180910390f35b61018361017e3660046111e3565b610358565b6040519015158152602001610167565b6101ba7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610167565b6101db60005481565b604051908152602001610167565b6101836101f736600461120d565b61036f565b610204601281565b60405160ff9091168152602001610167565b6101db60045481565b6101db60065481565b6101db60075481565b6101db60055481565b6101db610248366004611249565b60016020526000908152604090205481565b6101db60085481565b6101db610271366004611249565b60036020526000908152604090205481565b61015a6040518060400160405280600381526020016214d5d560ea1b81525081565b6102b86102b3366004611264565b610433565b60408051928352602083019190915201610167565b6101db6102db36600461127d565b610731565b6101836102ee3660046111e3565b61093f565b6101db6103013660046111e3565b61094c565b6101ba7f000000000000000000000000000000000000000000000000000000000000000081565b6101db61033b36600461129f565b600260209081526000928352604080842090915290825290205481565b6000610365338484610d77565b5060015b92915050565b6001600160a01b0383166000908152600260209081526040808320338452909152812054600019148015906103c657506001600160a01b038416600090815260026020908152604080832033845290915290205415155b1561041e576001600160a01b03841660009081526002602090815260408083203384529091529020546103f99083610e85565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610429848484610ec7565b5060019392505050565b6040516370a0823160e01b8152306004820152600090819081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa15801561049e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c291906112d2565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa15801561052c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055091906112d2565b6000549091506105608684611301565b61056a9190611318565b60005490945061057a8683611301565b6105849190611318565b92506000841180156105965750600083115b6105e05760405162461bcd60e51b8152602060048201526016602482015275494e53554646494349454e54204c495155494449545960501b60448201526064015b60405180910390fd5b6105ea3386610f6d565b6106066105f7858461133a565b610601858461133a565b610ffe565b60405163a9059cbb60e01b8152336004820152602481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610673573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610697919061134d565b5060405163a9059cbb60e01b8152336004820152602481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610705573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610729919061134d565b505050915091565b6040516323b872dd60e01b8152336004820152306024820152604481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af11580156107a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cb919061134d565b506040516323b872dd60e01b8152336004820152306024820152604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af115801561083f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610863919061134d565b506000600454118061087757506000600554115b156108d8578260055461088a9190611301565b826004546108989190611301565b146108d85760405162461bcd60e51b815260206004820152601060248201526f78202f207920213d206478202f20647960801b60448201526064016105d7565b6000546000036108fb576108f46108ef8385611301565b61105e565b9050610369565b6109386004546000548561090f9190611301565b6109199190611318565b6005546000546109299086611301565b6109339190611318565b6110ce565b9392505050565b6000610365338484610ec7565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614806109bf57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316145b6109fb5760405162461bcd60e51b815260206004820152600d60248201526c24a72b20a624a2102a27a5a2a760991b60448201526064016105d7565b60008211610a4b5760405162461bcd60e51b815260206004820152601960248201527f494e53554646494349454e5420494e50555420414d4f554e540000000000000060448201526064016105d7565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b031614905060008060008084610adc577f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000600554600454610b25565b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006004546005545b6040516323b872dd60e01b8152336004820152306024820152604481018c9052939750919550935091506001600160a01b038516906323b872dd906064016020604051808303816000875af1158015610b82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba6919061134d565b5060006103e8610bb8896103e5611301565b610bc29190611318565b9050610bce818461136f565b610bd88284611301565b610be29190611318565b60405163a9059cbb60e01b8152336004820152602481018290529097506001600160a01b0385169063a9059cbb906044016020604051808303816000875af1158015610c32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c56919061134d565b506040516370a0823160e01b8152306004820152610d6b907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610cbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce391906112d2565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610d47573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060191906112d2565b50505050505092915050565b6001600160a01b038216610dcd5760405162461bcd60e51b815260206004820152601b60248201527f5370656e6465722063616e6e6f7420626520302061646472657373000000000060448201526064016105d7565b6001600160a01b038316610e235760405162461bcd60e51b815260206004820152601960248201527f4f776e65722063616e6e6f74206265203020616464726573730000000000000060448201526064016105d7565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600061093883836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506110e5565b6001600160a01b038316600090815260016020526040902054610eea9082610e85565b6001600160a01b038085166000908152600160205260408082209390935590841681522054610f19908261111f565b6001600160a01b0380841660008181526001602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610e789085815260200190565b6001600160a01b038216600090815260016020526040902054610f909082610e85565b6001600160a01b03831660009081526001602052604081209190915554610fb79082610e85565b60009081556040518281526001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160701b03821180159061101c57506001600160701b038111155b6110535760405162461bcd60e51b81526020600482015260086024820152674f564552464c4f5760c01b60448201526064016105d7565b600491909155600555565b600060038211156110bf5750806000611078600283611318565b61108390600161136f565b90505b818110156110b95790508060028161109e8186611318565b6110a8919061136f565b6110b29190611318565b9050611086565b50919050565b81156110c9575060015b919050565b6000818311156110de5781610938565b5090919050565b600081848411156111095760405162461bcd60e51b81526004016105d7919061117e565b506000611116848661133a565b95945050505050565b60008061112c838561136f565b9050838110156109385760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016105d7565b600060208083528351808285015260005b818110156111ab5785810183015185820160400152820161118f565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146110c957600080fd5b600080604083850312156111f657600080fd5b6111ff836111cc565b946020939093013593505050565b60008060006060848603121561122257600080fd5b61122b846111cc565b9250611239602085016111cc565b9150604084013590509250925092565b60006020828403121561125b57600080fd5b610938826111cc565b60006020828403121561127657600080fd5b5035919050565b6000806040838503121561129057600080fd5b50508035926020909101359150565b600080604083850312156112b257600080fd5b6112bb836111cc565b91506112c9602084016111cc565b90509250929050565b6000602082840312156112e457600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610369576103696112eb565b60008261133557634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115610369576103696112eb565b60006020828403121561135f57600080fd5b8151801515811461093857600080fd5b80820180821115610369576103696112eb56fea264697066735822122006228053e96a7d11e71ccd448df814e739b2564475a4d9785750912101a09aa964736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c806370a08231116100ad5780639cd441da116100715780639cd441da146102cd578063a9059cbb146102e0578063d004f0f7146102f3578063d21220a714610306578063dd62ed3e1461032d57600080fd5b806370a082311461023a5780637464fc3d1461025a5780637ecebe001461026357806395d89b41146102835780639c8f9f23146102a557600080fd5b8063313ce567116100f4578063313ce567146101fc578063443cb4bc146102165780635909c0d51461021f5780635a3d5493146102285780635a76f25e1461023157600080fd5b806306fdde0314610131578063095ea7b3146101705780630dfe16811461019357806318160ddd146101d257806323b872dd146101e9575b600080fd5b61015a6040518060400160405280600a81526020016953776170546f6b656e7360b01b81525081565b604051610167919061117e565b60405180910390f35b61018361017e3660046111e3565b610358565b6040519015158152602001610167565b6101ba7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610167565b6101db60005481565b604051908152602001610167565b6101836101f736600461120d565b61036f565b610204601281565b60405160ff9091168152602001610167565b6101db60045481565b6101db60065481565b6101db60075481565b6101db60055481565b6101db610248366004611249565b60016020526000908152604090205481565b6101db60085481565b6101db610271366004611249565b60036020526000908152604090205481565b61015a6040518060400160405280600381526020016214d5d560ea1b81525081565b6102b86102b3366004611264565b610433565b60408051928352602083019190915201610167565b6101db6102db36600461127d565b610731565b6101836102ee3660046111e3565b61093f565b6101db6103013660046111e3565b61094c565b6101ba7f000000000000000000000000000000000000000000000000000000000000000081565b6101db61033b36600461129f565b600260209081526000928352604080842090915290825290205481565b6000610365338484610d77565b5060015b92915050565b6001600160a01b0383166000908152600260209081526040808320338452909152812054600019148015906103c657506001600160a01b038416600090815260026020908152604080832033845290915290205415155b1561041e576001600160a01b03841660009081526002602090815260408083203384529091529020546103f99083610e85565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610429848484610ec7565b5060019392505050565b6040516370a0823160e01b8152306004820152600090819081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa15801561049e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c291906112d2565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa15801561052c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055091906112d2565b6000549091506105608684611301565b61056a9190611318565b60005490945061057a8683611301565b6105849190611318565b92506000841180156105965750600083115b6105e05760405162461bcd60e51b8152602060048201526016602482015275494e53554646494349454e54204c495155494449545960501b60448201526064015b60405180910390fd5b6105ea3386610f6d565b6106066105f7858461133a565b610601858461133a565b610ffe565b60405163a9059cbb60e01b8152336004820152602481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610673573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610697919061134d565b5060405163a9059cbb60e01b8152336004820152602481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610705573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610729919061134d565b505050915091565b6040516323b872dd60e01b8152336004820152306024820152604481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af11580156107a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cb919061134d565b506040516323b872dd60e01b8152336004820152306024820152604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af115801561083f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610863919061134d565b506000600454118061087757506000600554115b156108d8578260055461088a9190611301565b826004546108989190611301565b146108d85760405162461bcd60e51b815260206004820152601060248201526f78202f207920213d206478202f20647960801b60448201526064016105d7565b6000546000036108fb576108f46108ef8385611301565b61105e565b9050610369565b6109386004546000548561090f9190611301565b6109199190611318565b6005546000546109299086611301565b6109339190611318565b6110ce565b9392505050565b6000610365338484610ec7565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614806109bf57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316145b6109fb5760405162461bcd60e51b815260206004820152600d60248201526c24a72b20a624a2102a27a5a2a760991b60448201526064016105d7565b60008211610a4b5760405162461bcd60e51b815260206004820152601960248201527f494e53554646494349454e5420494e50555420414d4f554e540000000000000060448201526064016105d7565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b031614905060008060008084610adc577f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000600554600454610b25565b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006004546005545b6040516323b872dd60e01b8152336004820152306024820152604481018c9052939750919550935091506001600160a01b038516906323b872dd906064016020604051808303816000875af1158015610b82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba6919061134d565b5060006103e8610bb8896103e5611301565b610bc29190611318565b9050610bce818461136f565b610bd88284611301565b610be29190611318565b60405163a9059cbb60e01b8152336004820152602481018290529097506001600160a01b0385169063a9059cbb906044016020604051808303816000875af1158015610c32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c56919061134d565b506040516370a0823160e01b8152306004820152610d6b907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610cbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce391906112d2565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610d47573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060191906112d2565b50505050505092915050565b6001600160a01b038216610dcd5760405162461bcd60e51b815260206004820152601b60248201527f5370656e6465722063616e6e6f7420626520302061646472657373000000000060448201526064016105d7565b6001600160a01b038316610e235760405162461bcd60e51b815260206004820152601960248201527f4f776e65722063616e6e6f74206265203020616464726573730000000000000060448201526064016105d7565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600061093883836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506110e5565b6001600160a01b038316600090815260016020526040902054610eea9082610e85565b6001600160a01b038085166000908152600160205260408082209390935590841681522054610f19908261111f565b6001600160a01b0380841660008181526001602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610e789085815260200190565b6001600160a01b038216600090815260016020526040902054610f909082610e85565b6001600160a01b03831660009081526001602052604081209190915554610fb79082610e85565b60009081556040518281526001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160701b03821180159061101c57506001600160701b038111155b6110535760405162461bcd60e51b81526020600482015260086024820152674f564552464c4f5760c01b60448201526064016105d7565b600491909155600555565b600060038211156110bf5750806000611078600283611318565b61108390600161136f565b90505b818110156110b95790508060028161109e8186611318565b6110a8919061136f565b6110b29190611318565b9050611086565b50919050565b81156110c9575060015b919050565b6000818311156110de5781610938565b5090919050565b600081848411156111095760405162461bcd60e51b81526004016105d7919061117e565b506000611116848661133a565b95945050505050565b60008061112c838561136f565b9050838110156109385760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016105d7565b600060208083528351808285015260005b818110156111ab5785810183015185820160400152820161118f565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146110c957600080fd5b600080604083850312156111f657600080fd5b6111ff836111cc565b946020939093013593505050565b60008060006060848603121561122257600080fd5b61122b846111cc565b9250611239602085016111cc565b9150604084013590509250925092565b60006020828403121561125b57600080fd5b610938826111cc565b60006020828403121561127657600080fd5b5035919050565b6000806040838503121561129057600080fd5b50508035926020909101359150565b600080604083850312156112b257600080fd5b6112bb836111cc565b91506112c9602084016111cc565b90509250929050565b6000602082840312156112e457600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610369576103696112eb565b60008261133557634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115610369576103696112eb565b60006020828403121561135f57600080fd5b8151801515811461093857600080fd5b80820180821115610369576103696112eb56fea264697066735822122006228053e96a7d11e71ccd448df814e739b2564475a4d9785750912101a09aa964736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1521,
        "contract": "contracts/core/SwapPairTokens2.sol:SwapPairTokens2",
        "label": "totalSupply",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1525,
        "contract": "contracts/core/SwapPairTokens2.sol:SwapPairTokens2",
        "label": "balanceOf",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1531,
        "contract": "contracts/core/SwapPairTokens2.sol:SwapPairTokens2",
        "label": "allowance",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1535,
        "contract": "contracts/core/SwapPairTokens2.sol:SwapPairTokens2",
        "label": "nonces",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1068,
        "contract": "contracts/core/SwapPairTokens2.sol:SwapPairTokens2",
        "label": "reserve0",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1070,
        "contract": "contracts/core/SwapPairTokens2.sol:SwapPairTokens2",
        "label": "reserve1",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1072,
        "contract": "contracts/core/SwapPairTokens2.sol:SwapPairTokens2",
        "label": "price0CumulativeLast",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1074,
        "contract": "contracts/core/SwapPairTokens2.sol:SwapPairTokens2",
        "label": "price1CumulativeLast",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1076,
        "contract": "contracts/core/SwapPairTokens2.sol:SwapPairTokens2",
        "label": "kLast",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}