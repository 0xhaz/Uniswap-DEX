{
  "address": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "LendingPool__InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LendingPool__InvalidUser",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LendingPool__InvalidValue",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Borrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "earnedInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBorrowRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getBorrowers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lendAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lenders",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_liquidateAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "paidInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_repayAmount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x728bce1272f741b740b95d21693a3ca8561d2f07d691496a24daa6778a970c0d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
    "transactionIndex": 0,
    "gasUsed": "793781",
    "logsBloom": "0x
    "blockHash": "0xf05488e86231c1e38b11627b15024a54ca6d211bf21966578cd816438a582632",
    "transactionHash": "0x728bce1272f741b740b95d21693a3ca8561d2f07d691496a24daa6778a970c0d",
    "logs": [],
    "blockNumber": 11,
    "cumulativeGasUsed": "793781",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0"
  ],
  "numDeployments": 1,
  "solcInputHash": "16aecfdc98be1463c9a88d7a0b2dc0f1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"LendingPool__InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LendingPool__InvalidUser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LendingPool__InvalidValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"earnedInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getBorrowers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lendAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lenders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidateAmount\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"paidInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_repayAmount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"borrow(uint256,address)\":{\"details\":\"- to borrow the amount\",\"params\":{\"_amount\":\"- borrowed amount\"}},\"deposit(uint256,address)\":{\"details\":\"- to lend the amount by adding liquidity\",\"params\":{\"_amount\":\"- deposited amount\"}},\"liquidate(address,uint256)\":{\"details\":\"- to liquidate the amount\",\"params\":{\"_liquidateAmount\":\"- amount to be liquidated\"}},\"repay(address,uint256)\":{\"details\":\"- to repay the amount\",\"params\":{\"_repayAmount\":\"- amount to be repaid\"}},\"withdraw(address,uint256)\":{\"details\":\"- to withdraw the amount\",\"params\":{\"_withdrawAmount\":\"- amount to be withdrawn\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/LendingPool.sol\":\"LendingPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/LendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nerror LendingPool__InvalidAmount();\\nerror LendingPool__InvalidValue();\\nerror LendingPool__InvalidUser();\\n\\ncontract LendingPool {\\n    IERC20 public token;\\n    address public immutable tokenAddress;\\n    uint256 totalPoolSupply;\\n    uint256 interestFactor;\\n\\n    // @dev the rate earned by the lender per second\\n    uint256 lendRate = 100; // 100 / 10^18 = 0.0000000000000001% per second\\n\\n    // @dev the rate paid by the borrower per second\\n    uint256 borrowRate = 130; // 130 / 10^18 = 0.00000000000000013% per second\\n\\n    uint256 periodBorrowed;\\n\\n    // @dev struct with amount and date of borrowing or lending\\n    struct Amount {\\n        uint256 amount;\\n        uint256 start;\\n    }\\n\\n    // @dev mapping of user address that has lended\\n    mapping(address => Amount) public lendAmount;\\n    // mapping of interest earned by the lender\\n    mapping(address => uint256) public earnedInterest;\\n\\n    // @dev arrays to store the info about lenders & borrowers\\n    mapping(address => bool) public lenders;\\n    mapping(address => bool) public borrowers;\\n\\n    // @dev mapping to check if the address has borrowed any amount\\n    mapping(address => Amount) public borrowAmount;\\n    // @dev mapping of interest paid by the borrower\\n    mapping(address => uint256) public paidInterest;\\n\\n    // @dev mapping of current total supply of the token\\n    mapping(address => uint256) private currentTotalSupply;\\n\\n    // Events\\n    event Deposit(address indexed user, uint256 amount);\\n    event Withdraw(address indexed user, uint256 amount);\\n    event Borrow(address indexed user, uint256 amount);\\n    event Repay(address indexed user, uint256 amount);\\n\\n    constructor(address _tokenAddress) {\\n        token = IERC20(_tokenAddress);\\n        tokenAddress = _tokenAddress;\\n\\n        uint256 tokenDecimals = token.decimals();\\n        // Calculate the dynamic factor for interest rate\\n        interestFactor = 10 ** tokenDecimals;\\n    }\\n\\n    /**\\n     * @dev - to liquidate the amount\\n     * @param _liquidateAmount - amount to be liquidated\\n     */\\n\\n    function liquidate(address _user, uint256 _liquidateAmount) public {\\n        if (!borrowers[_user]) revert LendingPool__InvalidUser();\\n\\n        if (_liquidateAmount >= borrowAmount[_user].amount)\\n            revert LendingPool__InvalidAmount();\\n\\n        uint256 _reward = (_liquidateAmount * 3) / 100;\\n        _updateBorrow(_user);\\n\\n        borrowAmount[_user].amount -= _liquidateAmount + _reward;\\n    }\\n\\n    /**\\n     * @dev - to lend the amount by adding liquidity\\n     * @param _amount - deposited amount\\n     */\\n    function deposit(uint256 _amount, address _user) external {\\n        if (_amount == 0) revert LendingPool__InvalidAmount();\\n\\n        /// @dev adding in lending and lenders array for tracking\\n        lendAmount[_user].amount = _amount;\\n        lendAmount[_user].start = block.timestamp;\\n        lenders[_user] = true;\\n\\n        /// @dev updating the total pool supply\\n        totalPoolSupply += _amount;\\n        _updateLend(_user);\\n        emit Deposit(_user, _amount);\\n    }\\n\\n    /**\\n     * @dev - to borrow the amount\\n     * @param _amount - borrowed amount\\n     */\\n\\n    function borrow(uint256 _amount, address _user) external {\\n        if (_amount == 0) revert LendingPool__InvalidAmount();\\n\\n        if (_amount > totalPoolSupply / 10) revert LendingPool__InvalidValue();\\n\\n        /// @dev updating the total pool supply\\n        borrowAmount[_user].amount = _amount;\\n        borrowAmount[_user].start = block.timestamp;\\n        totalPoolSupply -= _amount;\\n\\n        borrowers[_user] = true;\\n        _updateBorrow(_user);\\n        emit Borrow(_user, _amount);\\n    }\\n\\n    /**\\n     * @dev - to repay the amount\\n     * @param _repayAmount - amount to be repaid\\n     */\\n    function repay(address _user, uint256 _repayAmount) external {\\n        if (!borrowers[_user]) revert LendingPool__InvalidUser();\\n\\n        uint256 _amount = _calculateRepayAmount(_user, _repayAmount);\\n\\n        if (_amount == 0) revert LendingPool__InvalidAmount();\\n\\n        /// @dev updating the total pool supply\\n        borrowAmount[_user].amount -= _amount;\\n\\n        if (borrowAmount[_user].amount == 0) {\\n            borrowers[_user] = false;\\n        }\\n\\n        totalPoolSupply += _amount;\\n        _updateBorrow(_user);\\n        emit Repay(_user, _repayAmount);\\n    }\\n\\n    /**\\n     * @dev - to withdraw the amount\\n     * @param _withdrawAmount - amount to be withdrawn\\n     */\\n    function withdraw(address _user, uint256 _withdrawAmount) external {\\n        if (!lenders[_user]) revert LendingPool__InvalidUser();\\n\\n        /// @dev calculating the total amount with interest\\n        uint256 _amount = _calculateWithdrawAmount(_user, _withdrawAmount);\\n        // console.log(_amount);\\n        if (_amount == 0) revert LendingPool__InvalidAmount();\\n\\n        /// @dev delete the record from the lendAmount mapping\\n        lendAmount[_user].amount -= _amount;\\n\\n        if (lendAmount[_user].amount == 0) {\\n            lenders[_user] = false;\\n        }\\n\\n        /// @dev updating the total supply before transferring the tokens\\n        totalPoolSupply -= _amount;\\n\\n        _updateLend(_user);\\n        emit Withdraw(_user, _withdrawAmount);\\n    }\\n\\n    function getBorrowers(address _user) external view returns (uint256) {\\n        return borrowAmount[_user].amount;\\n    }\\n\\n    function getBorrowRate() external view returns (uint256) {\\n        return borrowRate;\\n    }\\n\\n    function _calculateRepayAmount(\\n        address _user,\\n        uint256 _repayAmount\\n    ) internal view returns (uint256 _amount) {\\n        /// @dev total amount to be repaid with interest\\n        Amount storage amount_ = borrowAmount[_user];\\n\\n        require(_repayAmount <= amount_.amount, \\\"Invalid amount\\\");\\n\\n        uint256 _interest = (_repayAmount *\\n            (((block.timestamp - amount_.start) * borrowRate) /\\n                interestFactor)) / totalPoolSupply;\\n\\n        _amount = (_repayAmount + _interest);\\n    }\\n\\n    function _calculateWithdrawAmount(\\n        address _user,\\n        uint256 _withdrawAmount\\n    ) internal view returns (uint256 amount) {\\n        Amount storage amount_ = lendAmount[_user];\\n\\n        require(_withdrawAmount <= amount_.amount, \\\"Invalid amount\\\");\\n\\n        uint256 elapsedTime = block.timestamp - amount_.start;\\n\\n        uint256 interestEarned = (_withdrawAmount *\\n            elapsedTime *\\n            lendRate *\\n            interestFactor) / totalPoolSupply;\\n\\n        amount = (_withdrawAmount + interestEarned);\\n    }\\n\\n    function _updateBorrow(\\n        address _user\\n    ) internal returns (uint256 _interestAmount) {\\n        Amount storage amount_ = borrowAmount[_user];\\n        _interestAmount =\\n            (amount_.amount *\\n                ((block.timestamp - amount_.start) *\\n                    borrowRate *\\n                    interestFactor)) /\\n            totalPoolSupply;\\n\\n        paidInterest[_user] = _interestAmount;\\n    }\\n\\n    function _updateLend(\\n        address _user\\n    ) internal returns (uint256 _interestAmount) {\\n        Amount storage amount_ = lendAmount[_user];\\n\\n        _interestAmount =\\n            (amount_.amount *\\n                ((block.timestamp - amount_.start) *\\n                    lendRate *\\n                    interestFactor)) /\\n            totalPoolSupply;\\n\\n        earnedInterest[_user] = _interestAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x2204e532d7bf21d8d0dca970b37b550e072919d44785c242d936a234c8f64118\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\ninterface IERC20 {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function decimals() external view returns (uint256);\\n\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    function allowance(\\n        address _owner,\\n        address _spender\\n    ) external view returns (uint256);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x239f47b2f966a01ac0f60503dec17b3d50e7bd5aaaea4f3fe8c79909d9da3f90\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x60a0604052606460035560826004553480156200001b57600080fd5b5060405162000df938038062000df98339810160408190526200003e91620000dd565b600080546001600160a01b0319166001600160a01b038316908117825560808190526040805163313ce56760e01b8152905163313ce567916004808201926020929091908290030181865afa1580156200009c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000c291906200010f565b9050620000d181600a6200023e565b600255506200024c9050565b600060208284031215620000f057600080fd5b81516001600160a01b03811681146200010857600080fd5b9392505050565b6000602082840312156200012257600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600181815b808511156200018057816000190482111562000164576200016462000129565b808516156200017257918102915b93841c939080029062000144565b509250929050565b600082620001995750600162000238565b81620001a85750600062000238565b8160018114620001c15760028114620001cc57620001ec565b600191505062000238565b60ff841115620001e057620001e062000129565b50506001821b62000238565b5060208310610133831016604e8410600b841016171562000211575081810a62000238565b6200021d83836200013f565b806000190482111562000234576200023462000129565b0290505b92915050565b600062000108838362000188565b608051610b9162000268600039600061024c0152610b916000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80636e553f6511610097578063bcbaf48711610066578063bcbaf4871461028e578063bf5d50c4146102a1578063f3fef3a3146102c4578063fc0c546a146102d757600080fd5b80636e553f651461020d5780638d113a7f146102205780639d76ea5814610247578063ba1c5e801461028657600080fd5b80633c166b8e116100d35780633c166b8e146101835780634807b6cf146101b15780634b3fd148146101da5780635d948c35146101ed57600080fd5b80631c78da26146100fa57806322867d781461013b57806328fd10d714610150575b600080fd5b610121610108366004610a68565b6006602052600090815260409020805460019091015482565b604080519283526020830191909152015b60405180910390f35b61014e610149366004610a8a565b6102ea565b005b61017361015e366004610a68565b60086020526000908152604090205460ff1681565b6040519015158152602001610132565b6101a3610191366004610a68565b600b6020526000908152604090205481565b604051908152602001610132565b6101a36101bf366004610a68565b6001600160a01b03166000908152600a602052604090205490565b61014e6101e8366004610ab4565b610429565b6101a36101fb366004610a68565b60076020526000908152604090205481565b61014e61021b366004610ab4565b610524565b61012161022e366004610a68565b600a602052600090815260409020805460019091015482565b61026e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610132565b6004546101a3565b61014e61029c366004610a8a565b6105d6565b6101736102af366004610a68565b60096020526000908152604090205460ff1681565b61014e6102d2366004610a8a565b6106a8565b60005461026e906001600160a01b031681565b6001600160a01b03821660009081526009602052604090205460ff1661032357604051630d2a32b360e11b815260040160405180910390fd5b600061032f83836107da565b90508060000361035257604051633a9c46bf60e11b815260040160405180910390fd5b6001600160a01b0383166000908152600a60205260408120805483929061037a908490610af6565b90915550506001600160a01b0383166000908152600a602052604081205490036103bf576001600160a01b0383166000908152600960205260409020805460ff191690555b80600160008282546103d19190610b0f565b909155506103e0905083610891565b50826001600160a01b03167f5c16de4f8b59bd9caf0f49a545f25819a895ed223294290b408242e72a5942318360405161041c91815260200190565b60405180910390a2505050565b8160000361044a57604051633a9c46bf60e11b815260040160405180910390fd5b600a6001546104599190610b22565b8211156104795760405163de71bbd360e01b815260040160405180910390fd5b6001600160a01b0381166000908152600a602052604081208381554260019182015580548492906104ab908490610af6565b90915550506001600160a01b0381166000908152600960205260409020805460ff191660011790556104dc81610891565b50806001600160a01b03167fcbc04eca7e9da35cb1393a6135a199ca52e450d5e9251cbd99f7847d33a367508360405161051891815260200190565b60405180910390a25050565b8160000361054557604051633a9c46bf60e11b815260040160405180910390fd5b6001600160a01b03811660009081526006602090815260408083208581554260019182015560089092528220805460ff191682179055805484929061058b908490610b0f565b9091555061059a905081610912565b50806001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c8360405161051891815260200190565b6001600160a01b03821660009081526009602052604090205460ff1661060f57604051630d2a32b360e11b815260040160405180910390fd5b6001600160a01b0382166000908152600a6020526040902054811061064757604051633a9c46bf60e11b815260040160405180910390fd5b60006064610656836003610b44565b6106609190610b22565b905061066b83610891565b506106768183610b0f565b6001600160a01b0384166000908152600a60205260408120805490919061069e908490610af6565b9091555050505050565b6001600160a01b03821660009081526008602052604090205460ff166106e157604051630d2a32b360e11b815260040160405180910390fd5b60006106ed8383610993565b90508060000361071057604051633a9c46bf60e11b815260040160405180910390fd5b6001600160a01b03831660009081526006602052604081208054839290610738908490610af6565b90915550506001600160a01b038316600090815260066020526040812054900361077d576001600160a01b0383166000908152600860205260409020805460ff191690555b806001600082825461078f9190610af6565b9091555061079e905083610912565b50826001600160a01b03167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243648360405161041c91815260200190565b6001600160a01b0382166000908152600a6020526040812080548311156108395760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b60448201526064015b60405180910390fd5b60006001546002546004548460010154426108549190610af6565b61085e9190610b44565b6108689190610b22565b6108729086610b44565b61087c9190610b22565b90506108888185610b0f565b95945050505050565b6001600160a01b0381166000908152600a602052604081206001805460025460045492840154919290916108c59042610af6565b6108cf9190610b44565b6108d99190610b44565b82546108e59190610b44565b6108ef9190610b22565b6001600160a01b039093166000908152600b602052604090208390555090919050565b6001600160a01b03811660009081526006602052604081206001805460025460035492840154919290916109469042610af6565b6109509190610b44565b61095a9190610b44565b82546109669190610b44565b6109709190610b22565b6001600160a01b0390931660009081526007602052604090208390555090919050565b6001600160a01b038216600090815260066020526040812080548311156109ed5760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b6044820152606401610830565b60008160010154426109ff9190610af6565b905060006001546002546003548488610a189190610b44565b610a229190610b44565b610a2c9190610b44565b610a369190610b22565b9050610a428186610b0f565b9695505050505050565b80356001600160a01b0381168114610a6357600080fd5b919050565b600060208284031215610a7a57600080fd5b610a8382610a4c565b9392505050565b60008060408385031215610a9d57600080fd5b610aa683610a4c565b946020939093013593505050565b60008060408385031215610ac757600080fd5b82359150610ad760208401610a4c565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610b0957610b09610ae0565b92915050565b80820180821115610b0957610b09610ae0565b600082610b3f57634e487b7160e01b600052601260045260246000fd5b500490565b8082028115828204841417610b0957610b09610ae056fea264697066735822122030e781ecdb565691b406bbf63c8891152670fa4bce6fc18fd29f0af6b0e5222c64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80636e553f6511610097578063bcbaf48711610066578063bcbaf4871461028e578063bf5d50c4146102a1578063f3fef3a3146102c4578063fc0c546a146102d757600080fd5b80636e553f651461020d5780638d113a7f146102205780639d76ea5814610247578063ba1c5e801461028657600080fd5b80633c166b8e116100d35780633c166b8e146101835780634807b6cf146101b15780634b3fd148146101da5780635d948c35146101ed57600080fd5b80631c78da26146100fa57806322867d781461013b57806328fd10d714610150575b600080fd5b610121610108366004610a68565b6006602052600090815260409020805460019091015482565b604080519283526020830191909152015b60405180910390f35b61014e610149366004610a8a565b6102ea565b005b61017361015e366004610a68565b60086020526000908152604090205460ff1681565b6040519015158152602001610132565b6101a3610191366004610a68565b600b6020526000908152604090205481565b604051908152602001610132565b6101a36101bf366004610a68565b6001600160a01b03166000908152600a602052604090205490565b61014e6101e8366004610ab4565b610429565b6101a36101fb366004610a68565b60076020526000908152604090205481565b61014e61021b366004610ab4565b610524565b61012161022e366004610a68565b600a602052600090815260409020805460019091015482565b61026e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610132565b6004546101a3565b61014e61029c366004610a8a565b6105d6565b6101736102af366004610a68565b60096020526000908152604090205460ff1681565b61014e6102d2366004610a8a565b6106a8565b60005461026e906001600160a01b031681565b6001600160a01b03821660009081526009602052604090205460ff1661032357604051630d2a32b360e11b815260040160405180910390fd5b600061032f83836107da565b90508060000361035257604051633a9c46bf60e11b815260040160405180910390fd5b6001600160a01b0383166000908152600a60205260408120805483929061037a908490610af6565b90915550506001600160a01b0383166000908152600a602052604081205490036103bf576001600160a01b0383166000908152600960205260409020805460ff191690555b80600160008282546103d19190610b0f565b909155506103e0905083610891565b50826001600160a01b03167f5c16de4f8b59bd9caf0f49a545f25819a895ed223294290b408242e72a5942318360405161041c91815260200190565b60405180910390a2505050565b8160000361044a57604051633a9c46bf60e11b815260040160405180910390fd5b600a6001546104599190610b22565b8211156104795760405163de71bbd360e01b815260040160405180910390fd5b6001600160a01b0381166000908152600a602052604081208381554260019182015580548492906104ab908490610af6565b90915550506001600160a01b0381166000908152600960205260409020805460ff191660011790556104dc81610891565b50806001600160a01b03167fcbc04eca7e9da35cb1393a6135a199ca52e450d5e9251cbd99f7847d33a367508360405161051891815260200190565b60405180910390a25050565b8160000361054557604051633a9c46bf60e11b815260040160405180910390fd5b6001600160a01b03811660009081526006602090815260408083208581554260019182015560089092528220805460ff191682179055805484929061058b908490610b0f565b9091555061059a905081610912565b50806001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c8360405161051891815260200190565b6001600160a01b03821660009081526009602052604090205460ff1661060f57604051630d2a32b360e11b815260040160405180910390fd5b6001600160a01b0382166000908152600a6020526040902054811061064757604051633a9c46bf60e11b815260040160405180910390fd5b60006064610656836003610b44565b6106609190610b22565b905061066b83610891565b506106768183610b0f565b6001600160a01b0384166000908152600a60205260408120805490919061069e908490610af6565b9091555050505050565b6001600160a01b03821660009081526008602052604090205460ff166106e157604051630d2a32b360e11b815260040160405180910390fd5b60006106ed8383610993565b90508060000361071057604051633a9c46bf60e11b815260040160405180910390fd5b6001600160a01b03831660009081526006602052604081208054839290610738908490610af6565b90915550506001600160a01b038316600090815260066020526040812054900361077d576001600160a01b0383166000908152600860205260409020805460ff191690555b806001600082825461078f9190610af6565b9091555061079e905083610912565b50826001600160a01b03167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243648360405161041c91815260200190565b6001600160a01b0382166000908152600a6020526040812080548311156108395760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b60448201526064015b60405180910390fd5b60006001546002546004548460010154426108549190610af6565b61085e9190610b44565b6108689190610b22565b6108729086610b44565b61087c9190610b22565b90506108888185610b0f565b95945050505050565b6001600160a01b0381166000908152600a602052604081206001805460025460045492840154919290916108c59042610af6565b6108cf9190610b44565b6108d99190610b44565b82546108e59190610b44565b6108ef9190610b22565b6001600160a01b039093166000908152600b602052604090208390555090919050565b6001600160a01b03811660009081526006602052604081206001805460025460035492840154919290916109469042610af6565b6109509190610b44565b61095a9190610b44565b82546109669190610b44565b6109709190610b22565b6001600160a01b0390931660009081526007602052604090208390555090919050565b6001600160a01b038216600090815260066020526040812080548311156109ed5760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b6044820152606401610830565b60008160010154426109ff9190610af6565b905060006001546002546003548488610a189190610b44565b610a229190610b44565b610a2c9190610b44565b610a369190610b22565b9050610a428186610b0f565b9695505050505050565b80356001600160a01b0381168114610a6357600080fd5b919050565b600060208284031215610a7a57600080fd5b610a8382610a4c565b9392505050565b60008060408385031215610a9d57600080fd5b610aa683610a4c565b946020939093013593505050565b60008060408385031215610ac757600080fd5b82359150610ad760208401610a4c565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610b0957610b09610ae0565b92915050565b80820180821115610b0957610b09610ae0565b600082610b3f57634e487b7160e01b600052601260045260246000fd5b500490565b8082028115828204841417610b0957610b09610ae056fea264697066735822122030e781ecdb565691b406bbf63c8891152670fa4bce6fc18fd29f0af6b0e5222c64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "borrow(uint256,address)": {
        "details": "- to borrow the amount",
        "params": {
          "_amount": "- borrowed amount"
        }
      },
      "deposit(uint256,address)": {
        "details": "- to lend the amount by adding liquidity",
        "params": {
          "_amount": "- deposited amount"
        }
      },
      "liquidate(address,uint256)": {
        "details": "- to liquidate the amount",
        "params": {
          "_liquidateAmount": "- amount to be liquidated"
        }
      },
      "repay(address,uint256)": {
        "details": "- to repay the amount",
        "params": {
          "_repayAmount": "- amount to be repaid"
        }
      },
      "withdraw(address,uint256)": {
        "details": "- to withdraw the amount",
        "params": {
          "_withdrawAmount": "- amount to be withdrawn"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1062,
        "contract": "contracts/core/LendingPool.sol:LendingPool",
        "label": "token",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)4288"
      },
      {
        "astId": 1066,
        "contract": "contracts/core/LendingPool.sol:LendingPool",
        "label": "totalPoolSupply",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1068,
        "contract": "contracts/core/LendingPool.sol:LendingPool",
        "label": "interestFactor",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1071,
        "contract": "contracts/core/LendingPool.sol:LendingPool",
        "label": "lendRate",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1074,
        "contract": "contracts/core/LendingPool.sol:LendingPool",
        "label": "borrowRate",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1076,
        "contract": "contracts/core/LendingPool.sol:LendingPool",
        "label": "periodBorrowed",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1086,
        "contract": "contracts/core/LendingPool.sol:LendingPool",
        "label": "lendAmount",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(Amount)1081_storage)"
      },
      {
        "astId": 1090,
        "contract": "contracts/core/LendingPool.sol:LendingPool",
        "label": "earnedInterest",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1094,
        "contract": "contracts/core/LendingPool.sol:LendingPool",
        "label": "lenders",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1098,
        "contract": "contracts/core/LendingPool.sol:LendingPool",
        "label": "borrowers",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1103,
        "contract": "contracts/core/LendingPool.sol:LendingPool",
        "label": "borrowAmount",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_struct(Amount)1081_storage)"
      },
      {
        "astId": 1107,
        "contract": "contracts/core/LendingPool.sol:LendingPool",
        "label": "paidInterest",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1111,
        "contract": "contracts/core/LendingPool.sol:LendingPool",
        "label": "currentTotalSupply",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)4288": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Amount)1081_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LendingPool.Amount)",
        "numberOfBytes": "32",
        "value": "t_struct(Amount)1081_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Amount)1081_storage": {
        "encoding": "inplace",
        "label": "struct LendingPool.Amount",
        "members": [
          {
            "astId": 1078,
            "contract": "contracts/core/LendingPool.sol:LendingPool",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1080,
            "contract": "contracts/core/LendingPool.sol:LendingPool",
            "label": "start",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}