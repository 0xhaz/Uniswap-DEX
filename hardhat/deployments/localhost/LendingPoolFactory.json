{
  "address": "0xB7f8BC63BbcaD18155201308C8f3540b07f84F5e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LendingPoolCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allLendingPools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPoolsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "createPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeProvider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getLendingPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc34f8f69bf7862f686d2e46c34ef1a8e8d21d907e56e283b2090119deb6fdf24",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xB7f8BC63BbcaD18155201308C8f3540b07f84F5e",
    "transactionIndex": 0,
    "gasUsed": "1045212",
    "logsBloom": "0x
    "blockHash": "0x325a0b39f13a834bcfc7f3eb4794852d4171fd28d53f41ddf33560cf3b1c1dd4",
    "transactionHash": "0xc34f8f69bf7862f686d2e46c34ef1a8e8d21d907e56e283b2090119deb6fdf24",
    "logs": [],
    "blockNumber": 12,
    "cumulativeGasUsed": "1045212",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
  ],
  "numDeployments": 1,
  "solcInputHash": "ba193ebc812ae7cb80afca5f7fc7624f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LendingPoolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allLendingPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPoolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getLendingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factory/LendingPoolFactory.sol\":\"LendingPoolFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/LendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nerror LendingPool__InvalidAmount();\\nerror LendingPool__InvalidValue();\\nerror LendingPool__InvalidUser();\\n\\ncontract LendingPool {\\n    IERC20 public token;\\n    address public immutable tokenAddress;\\n    uint256 totalPoolSupply;\\n    uint256 interestFactor;\\n\\n    // @dev the rate earned by the lender per second\\n    uint256 lendRate = 100; // 100 / 10^18 = 0.0000000000000001% per second\\n\\n    // @dev the rate paid by the borrower per second\\n    uint256 borrowRate = 130; // 130 / 10^18 = 0.00000000000000013% per second\\n\\n    uint256 periodBorrowed;\\n\\n    // @dev struct with amount and date of borrowing or lending\\n    struct Amount {\\n        uint256 amount;\\n        uint256 start;\\n    }\\n\\n    // @dev mapping of user address that has lended\\n    mapping(address => Amount) public lendAmount;\\n    // mapping of interest earned by the lender\\n    mapping(address => uint256) public earnedInterest;\\n\\n    // @dev arrays to store the info about lenders & borrowers\\n    mapping(address => bool) public lenders;\\n    mapping(address => bool) public borrowers;\\n\\n    // @dev mapping to check if the address has borrowed any amount\\n    mapping(address => Amount) public borrowAmount;\\n    // @dev mapping of interest paid by the borrower\\n    mapping(address => uint256) public paidInterest;\\n\\n    // Events\\n    event Deposit(address indexed user, uint256 amount);\\n    event Withdraw(address indexed user, uint256 amount);\\n    event Borrow(address indexed user, uint256 amount);\\n    event Repay(address indexed user, uint256 amount);\\n\\n    constructor(address _tokenAddress) {\\n        token = IERC20(_tokenAddress);\\n        tokenAddress = _tokenAddress;\\n\\n        uint256 tokenDecimals = token.decimals();\\n        // Calculate the dynamic factor for interest rate\\n        interestFactor = 10 ** tokenDecimals;\\n    }\\n\\n    /**\\n     * @dev - to liquidate the amount\\n     * @param _liquidateAmount - amount to be liquidated\\n     */\\n\\n    function liquidate(address _user, uint256 _liquidateAmount) public {\\n        if (!borrowers[_user]) revert LendingPool__InvalidUser();\\n\\n        if (_liquidateAmount >= borrowAmount[_user].amount)\\n            revert LendingPool__InvalidAmount();\\n\\n        uint256 _reward = (_liquidateAmount * 3) / 100;\\n        _updateBorrow(_user);\\n\\n        borrowAmount[_user].amount -= _liquidateAmount + _reward;\\n    }\\n\\n    /**\\n     * @dev - to lend the amount by adding liquidity\\n     * @param _amount - deposited amount\\n     */\\n    function deposit(uint256 _amount, address _user) external {\\n        if (_amount == 0) revert LendingPool__InvalidAmount();\\n\\n        Amount storage userAmount = lendAmount[_user];\\n\\n        userAmount.amount += _amount;\\n\\n        if (userAmount.start == 0) {\\n            userAmount.start = block.timestamp;\\n        }\\n\\n        lenders[_user] = true;\\n\\n        /// @dev updating the total pool supply\\n        totalPoolSupply += _amount;\\n        _updateLend(_user);\\n        emit Deposit(_user, _amount);\\n    }\\n\\n    /**\\n     * @dev - to borrow the amount\\n     * @param _amount - borrowed amount\\n     */\\n\\n    function borrow(uint256 _amount, address _user) external {\\n        if (_amount == 0) revert LendingPool__InvalidAmount();\\n\\n        if (_amount > totalPoolSupply / 10) revert LendingPool__InvalidValue();\\n\\n        /// @dev updating the total pool supply\\n        borrowAmount[_user].amount = _amount;\\n        borrowAmount[_user].start = block.timestamp;\\n        totalPoolSupply -= _amount;\\n\\n        borrowers[_user] = true;\\n\\n        emit Borrow(_user, _amount);\\n    }\\n\\n    /**\\n     * @dev - to repay the amount\\n     * @param _repayAmount - amount to be repaid\\n     */\\n    function repay(address _user, uint256 _repayAmount) external {\\n        if (!borrowers[_user]) revert LendingPool__InvalidUser();\\n\\n        uint256 _amount = _calculateRepayAmount(_user, _repayAmount);\\n\\n        if (_amount == 0) revert LendingPool__InvalidAmount();\\n\\n        /// @dev updating the total pool supply\\n        borrowAmount[_user].amount -= _amount;\\n\\n        if (borrowAmount[_user].amount == 0) {\\n            borrowers[_user] = false;\\n        }\\n\\n        totalPoolSupply += _amount;\\n        _updateBorrow(_user);\\n        emit Repay(_user, _repayAmount);\\n    }\\n\\n    /**\\n     * @dev - to withdraw the amount\\n     * @param _withdrawAmount - amount to be withdrawn\\n     */\\n    function withdraw(address _user, uint256 _withdrawAmount) external {\\n        if (!lenders[_user]) revert LendingPool__InvalidUser();\\n\\n        Amount storage userAmount = lendAmount[_user];\\n\\n        /// @dev calculating the total amount with interest\\n\\n        // console.log(_amount);\\n        if (_withdrawAmount == 0) revert LendingPool__InvalidAmount();\\n\\n        userAmount.amount -= _withdrawAmount;\\n\\n        if (userAmount.amount == 0) {\\n            lenders[_user] = false;\\n        }\\n\\n        /// @dev updating the total supply before transferring the tokens\\n        totalPoolSupply -= _withdrawAmount;\\n\\n        _updateLend(_user);\\n        emit Withdraw(_user, _withdrawAmount);\\n    }\\n\\n    function getBorrowers(address _user) external view returns (uint256) {\\n        return borrowAmount[_user].amount;\\n    }\\n\\n    function getBorrowRate() external view returns (uint256) {\\n        return borrowRate;\\n    }\\n\\n    /// @dev get the current total supply of the token\\n    function getCurrentTotalSupply() external view returns (uint256) {\\n        return totalPoolSupply;\\n    }\\n\\n    function _calculateRepayAmount(\\n        address _user,\\n        uint256 _repayAmount\\n    ) internal view returns (uint256 _amount) {\\n        /// @dev total amount to be repaid with interest\\n        Amount storage amount_ = borrowAmount[_user];\\n\\n        require(_repayAmount <= amount_.amount, \\\"Invalid amount\\\");\\n\\n        uint256 _interest = (_repayAmount *\\n            (((block.timestamp - amount_.start) * borrowRate) /\\n                interestFactor)) / totalPoolSupply;\\n\\n        _amount = (_repayAmount + _interest);\\n    }\\n\\n    function _updateBorrow(\\n        address _user\\n    ) internal returns (uint256 _interestAmount) {\\n        Amount storage amount_ = borrowAmount[_user];\\n\\n        if (amount_.start == 0) {\\n            return 0;\\n        }\\n\\n        _interestAmount =\\n            (amount_.amount *\\n                ((block.timestamp - amount_.start) *\\n                    borrowRate *\\n                    interestFactor)) /\\n            totalPoolSupply;\\n\\n        paidInterest[_user] = _interestAmount;\\n    }\\n\\n    function _updateLend(\\n        address _user\\n    ) internal returns (uint256 _interestAmount) {\\n        Amount storage amount_ = lendAmount[_user];\\n\\n        if (totalPoolSupply == 0 || amount_.start == 0) {\\n            return 0;\\n        }\\n\\n        _interestAmount =\\n            (amount_.amount *\\n                ((block.timestamp - amount_.start) *\\n                    lendRate *\\n                    interestFactor)) /\\n            totalPoolSupply;\\n\\n        earnedInterest[_user] = _interestAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x19034e925d9c7969231b97728849a0f566112381a6d2b1178a2281e52ed3f525\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/factory/LendingPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\nimport \\\"../core/LendingPool.sol\\\";\\n\\ncontract LendingPoolFactory {\\n    address public feeProvider;\\n    address public feeToSetter;\\n\\n    mapping(address => address) public getLendingPool;\\n    address[] public allLendingPools;\\n\\n    event LendingPoolCreated(\\n        address indexed sender,\\n        address indexed pool,\\n        uint256 timestamp\\n    );\\n\\n    constructor(address _feeToSetter) {\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    function allPoolsLength() external view returns (uint256) {\\n        return allLendingPools.length;\\n    }\\n\\n    function createPool(address _token) external returns (address) {\\n        require(_token != address(0), \\\"INVALID_TOKEN_ADDRESS\\\");\\n        require(getLendingPool[_token] == address(0), \\\"LENDING_POOL_EXISTS\\\");\\n\\n        LendingPool pool = new LendingPool(_token);\\n\\n        getLendingPool[_token] = address(pool);\\n        allLendingPools.push(address(pool));\\n\\n        emit LendingPoolCreated(msg.sender, address(pool), block.timestamp);\\n        return address(pool);\\n    }\\n\\n    function setFeeTo(address _feeTo) external {\\n        require(msg.sender == feeToSetter, \\\"UNAUTHORIZED\\\");\\n        feeToSetter = _feeTo;\\n    }\\n\\n    function setFeeToSetter(address _feeToSetter) external {\\n        require(msg.sender == feeToSetter, \\\"UNAUTHORIZED\\\");\\n        feeToSetter = _feeToSetter;\\n    }\\n}\\n\",\"keccak256\":\"0xf249aa3b521210e55a074d5f3c6671744e4961b24fd749cb6e62b6b8fb846bff\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\ninterface IERC20 {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function decimals() external view returns (uint256);\\n\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    function allowance(\\n        address _owner,\\n        address _spender\\n    ) external view returns (uint256);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x239f47b2f966a01ac0f60503dec17b3d50e7bd5aaaea4f3fe8c79909d9da3f90\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161121738038061121783398101604081905261002f91610054565b600180546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b611184806100936000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a2e74af61161005b578063a2e74af61461010c578063d407112714610121578063efde4e6414610134578063f46901ed1461010c57600080fd5b80630572bf5f1461008d578063094b7415146100d35780634066fdea146100e65780639049f9d2146100f9575b600080fd5b6100b661009b366004610385565b6002602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6001546100b6906001600160a01b031681565b6000546100b6906001600160a01b031681565b6100b6610107366004610385565b610145565b61011f61011a366004610385565b6102e3565b005b6100b661012f3660046103b5565b61034e565b6003546040519081526020016100ca565b60006001600160a01b03821661019a5760405162461bcd60e51b8152602060048201526015602482015274494e56414c49445f544f4b454e5f4144445245535360581b60448201526064015b60405180910390fd5b6001600160a01b0382811660009081526002602052604090205416156101f85760405162461bcd60e51b81526020600482015260136024820152724c454e44494e475f504f4f4c5f45584953545360681b6044820152606401610191565b60008260405161020790610378565b6001600160a01b039091168152602001604051809103906000f080158015610233573d6000803e3d6000fd5b506001600160a01b0380851660009081526002602052604080822080549385166001600160a01b031994851681179091556003805460018101825593527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9092018054909316821790925590519192509033907ffa0771b903554f55f80386cd118e3f0d5ed0330068933b9382f0b7d4a3bf35d3906102d59042815260200190565b60405180910390a392915050565b6001546001600160a01b0316331461032c5760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b6044820152606401610191565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6003818154811061035e57600080fd5b6000918252602090912001546001600160a01b0316905081565b610d80806103cf83390190565b60006020828403121561039757600080fd5b81356001600160a01b03811681146103ae57600080fd5b9392505050565b6000602082840312156103c757600080fd5b503591905056fe60a0604052606460035560826004553480156200001b57600080fd5b5060405162000d8038038062000d808339810160408190526200003e91620000dd565b600080546001600160a01b0319166001600160a01b038316908117825560808190526040805163313ce56760e01b8152905163313ce567916004808201926020929091908290030181865afa1580156200009c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000c291906200010f565b9050620000d181600a6200023e565b600255506200024c9050565b600060208284031215620000f057600080fd5b81516001600160a01b03811681146200010857600080fd5b9392505050565b6000602082840312156200012257600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600181815b808511156200018057816000190482111562000164576200016462000129565b808516156200017257918102915b93841c939080029062000144565b509250929050565b600082620001995750600162000238565b81620001a85750600062000238565b8160018114620001c15760028114620001cc57620001ec565b600191505062000238565b60ff841115620001e057620001e062000129565b50506001821b62000238565b5060208310610133831016604e8410600b841016171562000211575081810a62000238565b6200021d83836200013f565b806000190482111562000234576200023462000129565b0290505b92915050565b600062000108838362000188565b608051610b186200026860003960006102570152610b186000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80638d113a7f11610097578063bf5d50c411610066578063bf5d50c4146102ac578063c02ae754146102cf578063f3fef3a3146102d7578063fc0c546a146102ea57600080fd5b80638d113a7f1461022b5780639d76ea5814610252578063ba1c5e8014610291578063bcbaf4871461029957600080fd5b80634807b6cf116100d35780634807b6cf146101bc5780634b3fd148146101e55780635d948c35146101f85780636e553f651461021857600080fd5b80631c78da261461010557806322867d781461014657806328fd10d71461015b5780633c166b8e1461018e575b600080fd5b61012c6101133660046109ef565b6006602052600090815260409020805460019091015482565b604080519283526020830191909152015b60405180910390f35b610159610154366004610a11565b6102fd565b005b61017e6101693660046109ef565b60086020526000908152604090205460ff1681565b604051901515815260200161013d565b6101ae61019c3660046109ef565b600b6020526000908152604090205481565b60405190815260200161013d565b6101ae6101ca3660046109ef565b6001600160a01b03166000908152600a602052604090205490565b6101596101f3366004610a3b565b61043c565b6101ae6102063660046109ef565b60076020526000908152604090205481565b610159610226366004610a3b565b610524565b61012c6102393660046109ef565b600a602052600090815260409020805460019091015482565b6102797f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161013d565b6004546101ae565b6101596102a7366004610a11565b61060a565b61017e6102ba3660046109ef565b60096020526000908152604090205460ff1681565b6001546101ae565b6101596102e5366004610a11565b6106dc565b600054610279906001600160a01b031681565b6001600160a01b03821660009081526009602052604090205460ff1661033657604051630d2a32b360e11b815260040160405180910390fd5b600061034283836107ee565b90508060000361036557604051633a9c46bf60e11b815260040160405180910390fd5b6001600160a01b0383166000908152600a60205260408120805483929061038d908490610a7d565b90915550506001600160a01b0383166000908152600a602052604081205490036103d2576001600160a01b0383166000908152600960205260409020805460ff191690555b80600160008282546103e49190610a96565b909155506103f39050836108a4565b50826001600160a01b03167f5c16de4f8b59bd9caf0f49a545f25819a895ed223294290b408242e72a5942318360405161042f91815260200190565b60405180910390a2505050565b8160000361045d57604051633a9c46bf60e11b815260040160405180910390fd5b600a60015461046c9190610aa9565b82111561048c5760405163de71bbd360e01b815260040160405180910390fd5b6001600160a01b0381166000908152600a602052604081208381554260019182015580548492906104be908490610a7d565b90915550506001600160a01b03811660008181526009602052604090819020805460ff19166001179055517fcbc04eca7e9da35cb1393a6135a199ca52e450d5e9251cbd99f7847d33a36750906105189085815260200190565b60405180910390a25050565b8160000361054557604051633a9c46bf60e11b815260040160405180910390fd5b6001600160a01b0381166000908152600660205260408120805490918491839190610571908490610a96565b90915550506001810154600003610589574260018201555b6001600160a01b0382166000908152600860205260408120805460ff1916600190811790915580548592906105bf908490610a96565b909155506105ce905082610936565b50816001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c8460405161042f91815260200190565b6001600160a01b03821660009081526009602052604090205460ff1661064357604051630d2a32b360e11b815260040160405180910390fd5b6001600160a01b0382166000908152600a6020526040902054811061067b57604051633a9c46bf60e11b815260040160405180910390fd5b6000606461068a836003610acb565b6106949190610aa9565b905061069f836108a4565b506106aa8183610a96565b6001600160a01b0384166000908152600a6020526040812080549091906106d2908490610a7d565b9091555050505050565b6001600160a01b03821660009081526008602052604090205460ff1661071557604051630d2a32b360e11b815260040160405180910390fd5b6001600160a01b03821660009081526006602052604081209082900361074e57604051633a9c46bf60e11b815260040160405180910390fd5b818160000160008282546107629190610a7d565b90915550508054600003610791576001600160a01b0383166000908152600860205260409020805460ff191690555b81600160008282546107a39190610a7d565b909155506107b2905083610936565b50826001600160a01b03167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243648360405161042f91815260200190565b6001600160a01b0382166000908152600a60205260408120805483111561084c5760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b604482015260640160405180910390fd5b60006001546002546004548460010154426108679190610a7d565b6108719190610acb565b61087b9190610aa9565b6108859086610acb565b61088f9190610aa9565b905061089b8185610a96565b95945050505050565b6001600160a01b0381166000908152600a60205260408120600181015482036108d05750600092915050565b6001546002546004548360010154426108e99190610a7d565b6108f39190610acb565b6108fd9190610acb565b82546109099190610acb565b6109139190610aa9565b6001600160a01b039093166000908152600b602052604090208390555090919050565b6001600160a01b0381166000908152600660205260408120600154158061095f57506001810154155b1561096d5750600092915050565b6001546002546003548360010154426109869190610a7d565b6109909190610acb565b61099a9190610acb565b82546109a69190610acb565b6109b09190610aa9565b6001600160a01b0390931660009081526007602052604090208390555090919050565b80356001600160a01b03811681146109ea57600080fd5b919050565b600060208284031215610a0157600080fd5b610a0a826109d3565b9392505050565b60008060408385031215610a2457600080fd5b610a2d836109d3565b946020939093013593505050565b60008060408385031215610a4e57600080fd5b82359150610a5e602084016109d3565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610a9057610a90610a67565b92915050565b80820180821115610a9057610a90610a67565b600082610ac657634e487b7160e01b600052601260045260246000fd5b500490565b8082028115828204841417610a9057610a90610a6756fea264697066735822122073f0e24d276c7b17f8bc800adc96719a80be0e15bfe9999f404d6dcdaed29ac564736f6c63430008130033a26469706673582212202e92f0ed82010d5aaf25af7dd73576905115ec4ed3e6b8bc97facccec98170ae64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063a2e74af61161005b578063a2e74af61461010c578063d407112714610121578063efde4e6414610134578063f46901ed1461010c57600080fd5b80630572bf5f1461008d578063094b7415146100d35780634066fdea146100e65780639049f9d2146100f9575b600080fd5b6100b661009b366004610385565b6002602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6001546100b6906001600160a01b031681565b6000546100b6906001600160a01b031681565b6100b6610107366004610385565b610145565b61011f61011a366004610385565b6102e3565b005b6100b661012f3660046103b5565b61034e565b6003546040519081526020016100ca565b60006001600160a01b03821661019a5760405162461bcd60e51b8152602060048201526015602482015274494e56414c49445f544f4b454e5f4144445245535360581b60448201526064015b60405180910390fd5b6001600160a01b0382811660009081526002602052604090205416156101f85760405162461bcd60e51b81526020600482015260136024820152724c454e44494e475f504f4f4c5f45584953545360681b6044820152606401610191565b60008260405161020790610378565b6001600160a01b039091168152602001604051809103906000f080158015610233573d6000803e3d6000fd5b506001600160a01b0380851660009081526002602052604080822080549385166001600160a01b031994851681179091556003805460018101825593527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9092018054909316821790925590519192509033907ffa0771b903554f55f80386cd118e3f0d5ed0330068933b9382f0b7d4a3bf35d3906102d59042815260200190565b60405180910390a392915050565b6001546001600160a01b0316331461032c5760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b6044820152606401610191565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6003818154811061035e57600080fd5b6000918252602090912001546001600160a01b0316905081565b610d80806103cf83390190565b60006020828403121561039757600080fd5b81356001600160a01b03811681146103ae57600080fd5b9392505050565b6000602082840312156103c757600080fd5b503591905056fe60a0604052606460035560826004553480156200001b57600080fd5b5060405162000d8038038062000d808339810160408190526200003e91620000dd565b600080546001600160a01b0319166001600160a01b038316908117825560808190526040805163313ce56760e01b8152905163313ce567916004808201926020929091908290030181865afa1580156200009c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000c291906200010f565b9050620000d181600a6200023e565b600255506200024c9050565b600060208284031215620000f057600080fd5b81516001600160a01b03811681146200010857600080fd5b9392505050565b6000602082840312156200012257600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600181815b808511156200018057816000190482111562000164576200016462000129565b808516156200017257918102915b93841c939080029062000144565b509250929050565b600082620001995750600162000238565b81620001a85750600062000238565b8160018114620001c15760028114620001cc57620001ec565b600191505062000238565b60ff841115620001e057620001e062000129565b50506001821b62000238565b5060208310610133831016604e8410600b841016171562000211575081810a62000238565b6200021d83836200013f565b806000190482111562000234576200023462000129565b0290505b92915050565b600062000108838362000188565b608051610b186200026860003960006102570152610b186000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80638d113a7f11610097578063bf5d50c411610066578063bf5d50c4146102ac578063c02ae754146102cf578063f3fef3a3146102d7578063fc0c546a146102ea57600080fd5b80638d113a7f1461022b5780639d76ea5814610252578063ba1c5e8014610291578063bcbaf4871461029957600080fd5b80634807b6cf116100d35780634807b6cf146101bc5780634b3fd148146101e55780635d948c35146101f85780636e553f651461021857600080fd5b80631c78da261461010557806322867d781461014657806328fd10d71461015b5780633c166b8e1461018e575b600080fd5b61012c6101133660046109ef565b6006602052600090815260409020805460019091015482565b604080519283526020830191909152015b60405180910390f35b610159610154366004610a11565b6102fd565b005b61017e6101693660046109ef565b60086020526000908152604090205460ff1681565b604051901515815260200161013d565b6101ae61019c3660046109ef565b600b6020526000908152604090205481565b60405190815260200161013d565b6101ae6101ca3660046109ef565b6001600160a01b03166000908152600a602052604090205490565b6101596101f3366004610a3b565b61043c565b6101ae6102063660046109ef565b60076020526000908152604090205481565b610159610226366004610a3b565b610524565b61012c6102393660046109ef565b600a602052600090815260409020805460019091015482565b6102797f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161013d565b6004546101ae565b6101596102a7366004610a11565b61060a565b61017e6102ba3660046109ef565b60096020526000908152604090205460ff1681565b6001546101ae565b6101596102e5366004610a11565b6106dc565b600054610279906001600160a01b031681565b6001600160a01b03821660009081526009602052604090205460ff1661033657604051630d2a32b360e11b815260040160405180910390fd5b600061034283836107ee565b90508060000361036557604051633a9c46bf60e11b815260040160405180910390fd5b6001600160a01b0383166000908152600a60205260408120805483929061038d908490610a7d565b90915550506001600160a01b0383166000908152600a602052604081205490036103d2576001600160a01b0383166000908152600960205260409020805460ff191690555b80600160008282546103e49190610a96565b909155506103f39050836108a4565b50826001600160a01b03167f5c16de4f8b59bd9caf0f49a545f25819a895ed223294290b408242e72a5942318360405161042f91815260200190565b60405180910390a2505050565b8160000361045d57604051633a9c46bf60e11b815260040160405180910390fd5b600a60015461046c9190610aa9565b82111561048c5760405163de71bbd360e01b815260040160405180910390fd5b6001600160a01b0381166000908152600a602052604081208381554260019182015580548492906104be908490610a7d565b90915550506001600160a01b03811660008181526009602052604090819020805460ff19166001179055517fcbc04eca7e9da35cb1393a6135a199ca52e450d5e9251cbd99f7847d33a36750906105189085815260200190565b60405180910390a25050565b8160000361054557604051633a9c46bf60e11b815260040160405180910390fd5b6001600160a01b0381166000908152600660205260408120805490918491839190610571908490610a96565b90915550506001810154600003610589574260018201555b6001600160a01b0382166000908152600860205260408120805460ff1916600190811790915580548592906105bf908490610a96565b909155506105ce905082610936565b50816001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c8460405161042f91815260200190565b6001600160a01b03821660009081526009602052604090205460ff1661064357604051630d2a32b360e11b815260040160405180910390fd5b6001600160a01b0382166000908152600a6020526040902054811061067b57604051633a9c46bf60e11b815260040160405180910390fd5b6000606461068a836003610acb565b6106949190610aa9565b905061069f836108a4565b506106aa8183610a96565b6001600160a01b0384166000908152600a6020526040812080549091906106d2908490610a7d565b9091555050505050565b6001600160a01b03821660009081526008602052604090205460ff1661071557604051630d2a32b360e11b815260040160405180910390fd5b6001600160a01b03821660009081526006602052604081209082900361074e57604051633a9c46bf60e11b815260040160405180910390fd5b818160000160008282546107629190610a7d565b90915550508054600003610791576001600160a01b0383166000908152600860205260409020805460ff191690555b81600160008282546107a39190610a7d565b909155506107b2905083610936565b50826001600160a01b03167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243648360405161042f91815260200190565b6001600160a01b0382166000908152600a60205260408120805483111561084c5760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b604482015260640160405180910390fd5b60006001546002546004548460010154426108679190610a7d565b6108719190610acb565b61087b9190610aa9565b6108859086610acb565b61088f9190610aa9565b905061089b8185610a96565b95945050505050565b6001600160a01b0381166000908152600a60205260408120600181015482036108d05750600092915050565b6001546002546004548360010154426108e99190610a7d565b6108f39190610acb565b6108fd9190610acb565b82546109099190610acb565b6109139190610aa9565b6001600160a01b039093166000908152600b602052604090208390555090919050565b6001600160a01b0381166000908152600660205260408120600154158061095f57506001810154155b1561096d5750600092915050565b6001546002546003548360010154426109869190610a7d565b6109909190610acb565b61099a9190610acb565b82546109a69190610acb565b6109b09190610aa9565b6001600160a01b0390931660009081526007602052604090208390555090919050565b80356001600160a01b03811681146109ea57600080fd5b919050565b600060208284031215610a0157600080fd5b610a0a826109d3565b9392505050565b60008060408385031215610a2457600080fd5b610a2d836109d3565b946020939093013593505050565b60008060408385031215610a4e57600080fd5b82359150610a5e602084016109d3565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610a9057610a90610a67565b92915050565b80820180821115610a9057610a90610a67565b600082610ac657634e487b7160e01b600052601260045260246000fd5b500490565b8082028115828204841417610a9057610a90610a6756fea264697066735822122073f0e24d276c7b17f8bc800adc96719a80be0e15bfe9999f404d6dcdaed29ac564736f6c63430008130033a26469706673582212202e92f0ed82010d5aaf25af7dd73576905115ec4ed3e6b8bc97facccec98170ae64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3685,
        "contract": "contracts/factory/LendingPoolFactory.sol:LendingPoolFactory",
        "label": "feeProvider",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3687,
        "contract": "contracts/factory/LendingPoolFactory.sol:LendingPoolFactory",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3691,
        "contract": "contracts/factory/LendingPoolFactory.sol:LendingPoolFactory",
        "label": "getLendingPool",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 3694,
        "contract": "contracts/factory/LendingPoolFactory.sol:LendingPoolFactory",
        "label": "allLendingPools",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}