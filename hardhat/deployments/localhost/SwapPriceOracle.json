{
  "address": "0x68B1D87F95878fE05B998F19b66F4baba5De1aed",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        }
      ],
      "name": "getPriceA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "priceA",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        }
      ],
      "name": "getPriceB",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "priceB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf45a0e21805461d6ddf51677f43ed7fafa4965ea69983d03c25dddc3b5403f71",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x68B1D87F95878fE05B998F19b66F4baba5De1aed",
    "transactionIndex": 0,
    "gasUsed": "343451",
    "logsBloom": "0x
    "blockHash": "0x207687bc5d1dbfc25f02d0aad70ea1a9ea3fcc9ddd06f59307e816180859fddb",
    "transactionHash": "0xf45a0e21805461d6ddf51677f43ed7fafa4965ea69983d03c25dddc3b5403f71",
    "logs": [],
    "blockNumber": 19,
    "cumulativeGasUsed": "343451",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
    "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853"
  ],
  "numDeployments": 1,
  "solcInputHash": "16aecfdc98be1463c9a88d7a0b2dc0f1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"name\":\"getPriceA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceA\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"name\":\"getPriceB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/SwapPriceOracle.sol\":\"SwapPriceOracle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/ISwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\ninterface ISwapFactory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(\\n        address _tokenA,\\n        address _tokenB\\n    ) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(\\n        address _tokenA,\\n        address _tokenB\\n    ) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xc2f14161d78d4db24086450391cd2a50169b380241eee0579dbb158261cc873a\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/interfaces/ISwapPairTokens.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\ninterface ISwapPairTokens {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    function allowance(\\n        address _owner,\\n        address _spender\\n    ) external view returns (uint256);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool);\\n\\n    function permit(\\n        address _owner,\\n        address _spender,\\n        uint256 _value,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n\\n    function MINIMUM_LIQUIDITY() external view returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address _to) external returns (uint256 liquidity);\\n\\n    function burn(\\n        address _to\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 _amount0Out,\\n        uint256 _amount1Out,\\n        address _to,\\n        bytes calldata _data\\n    ) external;\\n\\n    function skim(address _to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address _token0, address _token1) external;\\n}\\n\",\"keccak256\":\"0xd655a8334249a1897b4822098a5ac178ce1593f242fe2478f760e1b580cc1047\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/libraries/SwapLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\nimport \\\"../interfaces/ISwapPairTokens.sol\\\";\\nimport \\\"../interfaces/ISwapFactory.sol\\\";\\nimport \\\"../libraries/safeMath.sol\\\";\\n\\nlibrary SwapLibrary {\\n    using SafeMath for uint256;\\n\\n    function sortTokens(\\n        address _tokenA,\\n        address _tokenB\\n    ) internal pure returns (address token0, address token1) {\\n        require(_tokenA != _tokenB, \\\"SwapLibrary: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = _tokenA < _tokenB\\n            ? (_tokenA, _tokenB)\\n            : (_tokenB, _tokenA);\\n        require(token0 != address(0), \\\"SwapLibrary: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address _factory,\\n        address _tokenA,\\n        address _tokenB\\n    ) internal view returns (address pair) {\\n        (address token0, address token1) = sortTokens(_tokenA, _tokenB);\\n        pair = ISwapFactory(_factory).getPair(token0, token1);\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address _factory,\\n        address _tokenA,\\n        address _tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(_tokenA, _tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = ISwapPairTokens(\\n            pairFor(_factory, _tokenA, _tokenB)\\n        ).getReserves();\\n        (reserveA, reserveB) = _tokenA == token0\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of other asset\\n    function quote(\\n        uint256 _amountA,\\n        uint256 _reserveA,\\n        uint256 _reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(_amountA > 0, \\\"SwapLibrary: INSUFFICIENT_AMOUNT\\\");\\n        require(\\n            _reserveA > 0 && _reserveB > 0,\\n            \\\"SwapLibrary: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        amountB = _amountA.mul(_reserveB) / _reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 _amountIn,\\n        uint256 _reserveIn,\\n        uint256 _reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(_amountIn > 0, \\\"SwapLibrary: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(\\n            _reserveIn > 0 && _reserveOut > 0,\\n            \\\"SwapLibrary: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 amountInWithFee = _amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(_reserveOut);\\n        uint256 denominator = _reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 _amountOut,\\n        uint256 _reserveIn,\\n        uint256 _reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(_amountOut > 0, \\\"SwapLibrary: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(\\n            _reserveIn > 0 && _reserveOut > 0,\\n            \\\"SwapLibrary: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 numerator = _reserveIn.mul(_amountOut).mul(1000);\\n        uint256 denominator = _reserveOut.sub(_amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address _factory,\\n        uint256 _amountIn,\\n        address[] memory _path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(_path.length >= 2, \\\"SwapLibrary: INVALID_PATH\\\");\\n        amounts = new uint256[](_path.length);\\n        amounts[0] = _amountIn;\\n        for (uint256 i; i < _path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n                _factory,\\n                _path[i],\\n                _path[i + 1]\\n            );\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address _factory,\\n        uint256 _amountOut,\\n        address[] memory _path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(_path.length >= 2, \\\"SwapLibrary: INVALID_PATH\\\");\\n        amounts = new uint256[](_path.length);\\n        amounts[amounts.length - 1] = _amountOut;\\n        for (uint256 i = _path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n                _factory,\\n                _path[i - 1],\\n                _path[i]\\n            );\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xca88f5e55d6c6aeb337bf27576ebf24eefb08b9f3ff847a2cb31c077c0870092\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/libraries/safeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x15e9fa47b61bcebc09264ecb978e4e665572320d43f75a5799125f21a2de80bc\",\"license\":\"MIT\"},\"contracts/oracle/SwapPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\nimport \\\"../libraries/SwapLibrary.sol\\\";\\nimport \\\"../interfaces/ISwapPairTokens.sol\\\";\\n\\ncontract SwapPriceOracle {\\n    address public immutable factory;\\n    address public immutable WETH;\\n\\n    constructor(address _factory, address _WETH) {\\n        factory = _factory;\\n        WETH = _WETH;\\n    }\\n\\n    // returns the price of A with precision of B\\n    // A = price * ( B   )\\n    function getPriceA(\\n        address _tokenA,\\n        address _tokenB\\n    ) public view returns (uint256 priceA) {\\n        address pair = SwapLibrary.pairFor(factory, _tokenA, _tokenB);\\n\\n        (uint reserveA, uint reserveB, uint timestamp) = ISwapPairTokens(pair)\\n            .getReserves();\\n        priceA = (reserveB / reserveA);\\n    }\\n\\n    function getPriceB(\\n        address _tokenA,\\n        address _tokenB\\n    ) public view returns (uint256 priceB) {\\n        address pair = SwapLibrary.pairFor(factory, _tokenA, _tokenB);\\n\\n        (uint reserveA, uint reserveB, uint timestamp) = ISwapPairTokens(pair)\\n            .getReserves();\\n        priceB = (reserveA / reserveB);\\n    }\\n}\\n\",\"keccak256\":\"0x88a5f61d4eb57ae692dca5e18ad5b2b8865bc7a19630c02f314426b939aef850\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b506040516105fb3803806105fb83398101604081905261002f91610062565b6001600160a01b039182166080521660a052610095565b80516001600160a01b038116811461005d57600080fd5b919050565b6000806040838503121561007557600080fd5b61007e83610046565b915061008c60208401610046565b90509250929050565b60805160a0516105366100c56000396000608f01526000818160ce0152818160f801526101c401526105366000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80634a611dd2146100515780638c10192214610077578063ad5c46481461008a578063c45a0155146100c9575b600080fd5b61006461005f366004610415565b6100f0565b6040519081526020015b60405180910390f35b610064610085366004610415565b6101bc565b6100b17f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161006e565b6100b17f000000000000000000000000000000000000000000000000000000000000000081565b60008061011e7f0000000000000000000000000000000000000000000000000000000000000000858561027d565b90506000806000836001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610163573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610187919061046a565b63ffffffff1692506001600160701b031692506001600160701b0316925081836101b191906104ba565b979650505050505050565b6000806101ea7f0000000000000000000000000000000000000000000000000000000000000000858561027d565b90506000806000836001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561022f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610253919061046a565b63ffffffff1692506001600160701b031692506001600160701b0316925082826101b191906104ba565b600080600061028c858561030f565b60405163e6a4390560e01b81526001600160a01b03808416600483015280831660248301529294509092509087169063e6a4390590604401602060405180830381865afa1580156102e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030591906104dc565b9695505050505050565b600080826001600160a01b0316846001600160a01b0316036103785760405162461bcd60e51b815260206004820181905260248201527f537761704c6962726172793a204944454e544943414c5f41444452455353455360448201526064015b60405180910390fd5b826001600160a01b0316846001600160a01b03161061039857828461039b565b83835b90925090506001600160a01b0382166103f65760405162461bcd60e51b815260206004820152601960248201527f537761704c6962726172793a205a45524f5f4144445245535300000000000000604482015260640161036f565b9250929050565b6001600160a01b038116811461041257600080fd5b50565b6000806040838503121561042857600080fd5b8235610433816103fd565b91506020830135610443816103fd565b809150509250929050565b80516001600160701b038116811461046557600080fd5b919050565b60008060006060848603121561047f57600080fd5b6104888461044e565b92506104966020850161044e565b9150604084015163ffffffff811681146104af57600080fd5b809150509250925092565b6000826104d757634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156104ee57600080fd5b81516104f9816103fd565b939250505056fea26469706673582212207e281f534ea79b32f7635c37427ed285182ed09595e4201b1d1350ce132e185f64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80634a611dd2146100515780638c10192214610077578063ad5c46481461008a578063c45a0155146100c9575b600080fd5b61006461005f366004610415565b6100f0565b6040519081526020015b60405180910390f35b610064610085366004610415565b6101bc565b6100b17f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161006e565b6100b17f000000000000000000000000000000000000000000000000000000000000000081565b60008061011e7f0000000000000000000000000000000000000000000000000000000000000000858561027d565b90506000806000836001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610163573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610187919061046a565b63ffffffff1692506001600160701b031692506001600160701b0316925081836101b191906104ba565b979650505050505050565b6000806101ea7f0000000000000000000000000000000000000000000000000000000000000000858561027d565b90506000806000836001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561022f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610253919061046a565b63ffffffff1692506001600160701b031692506001600160701b0316925082826101b191906104ba565b600080600061028c858561030f565b60405163e6a4390560e01b81526001600160a01b03808416600483015280831660248301529294509092509087169063e6a4390590604401602060405180830381865afa1580156102e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030591906104dc565b9695505050505050565b600080826001600160a01b0316846001600160a01b0316036103785760405162461bcd60e51b815260206004820181905260248201527f537761704c6962726172793a204944454e544943414c5f41444452455353455360448201526064015b60405180910390fd5b826001600160a01b0316846001600160a01b03161061039857828461039b565b83835b90925090506001600160a01b0382166103f65760405162461bcd60e51b815260206004820152601960248201527f537761704c6962726172793a205a45524f5f4144445245535300000000000000604482015260640161036f565b9250929050565b6001600160a01b038116811461041257600080fd5b50565b6000806040838503121561042857600080fd5b8235610433816103fd565b91506020830135610443816103fd565b809150509250929050565b80516001600160701b038116811461046557600080fd5b919050565b60008060006060848603121561047f57600080fd5b6104888461044e565b92506104966020850161044e565b9150604084015163ffffffff811681146104af57600080fd5b809150509250925092565b6000826104d757634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156104ee57600080fd5b81516104f9816103fd565b939250505056fea26469706673582212207e281f534ea79b32f7635c37427ed285182ed09595e4201b1d1350ce132e185f64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}