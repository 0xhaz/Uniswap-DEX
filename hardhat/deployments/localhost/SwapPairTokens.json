{
  "address": "0x3Aa5ebB10DC797CAC828524e59A333d0A371443c",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0In",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1In",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0Out",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1Out",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reserve0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reserve1",
          "type": "uint256"
        }
      ],
      "name": "Sync",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MINIMUM_LIQUIDITY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount1",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint112",
          "name": "_reserve0",
          "type": "uint112"
        },
        {
          "internalType": "uint112",
          "name": "_reserve1",
          "type": "uint112"
        },
        {
          "internalType": "uint32",
          "name": "_blockTimestampLast",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token1",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kLast",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price0CumulativeLast",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price1CumulativeLast",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "skim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount0Out",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount1Out",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sync",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd21a81946c923a28392dc073b0500fdc4695bb58c762c574abda21dbfc41b8b9",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x3Aa5ebB10DC797CAC828524e59A333d0A371443c",
    "transactionIndex": 0,
    "gasUsed": "1816157",
    "logsBloom": "0x
    "blockHash": "0x5552e7677c7b0155947e9da5e9ad462e5d3772400bf78ab6910e24b33b558f0e",
    "transactionHash": "0xd21a81946c923a28392dc073b0500fdc4695bb58c762c574abda21dbfc41b8b9",
    "logs": [],
    "blockNumber": 20,
    "cumulativeGasUsed": "1816157",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ff3f472e5438dd7d355c924648416203",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserve0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"}],\"name\":\"Sync\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINIMUM_LIQUIDITY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"_reserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"_reserve1\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"_blockTimestampLast\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price0CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount0Out\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount1Out\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/SwapPairTokens.sol\":\"SwapPairTokens\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/SwapPairTokens.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\nimport \\\"../libraries/Math.sol\\\";\\nimport \\\"../libraries/UQ112x112.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/ISwapFactory.sol\\\";\\nimport \\\"./SwapTokens.sol\\\";\\n\\ncontract SwapPairTokens is SwapTokens {\\n    using SafeMath for uint256;\\n    using UQ112x112 for uint224;\\n\\n    uint256 public constant MINIMUM_LIQUIDITY = 10 ** 3;\\n    bytes4 private constant SELECTOR =\\n        bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n\\n    address public factory;\\n    address public token0;\\n    address public token1;\\n\\n    uint112 private reserve0; // uses single storage slot, accessible via getReserves\\n    uint112 private reserve1; // uses single storage slot, accessible via getReserves\\n    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n\\n    uint256 public price0CumulativeLast;\\n    uint256 public price1CumulativeLast;\\n    uint256 public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\\n\\n    uint256 private unlocked = 1;\\n\\n    modifier lock() {\\n        require(unlocked == 1, \\\"SwapPairTokens: LOCKED\\\");\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint256 reserve0, uint256 reserve1);\\n\\n    constructor() {\\n        factory = msg.sender;\\n    }\\n\\n    function getReserves()\\n        public\\n        view\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        )\\n    {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    // called once by the factory at time of deployment\\n    function initialize(address _token0, address _token1) external {\\n        require(msg.sender == factory, \\\"SwapPairTokens: FORBIDDEN\\\"); // sufficient check\\n        token0 = _token0;\\n        token1 = _token1;\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function burn(\\n        address _to\\n    ) external lock returns (uint256 _amount0, uint256 _amount1) {\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        uint256 balance0 = IERC20(_token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20(_token1).balanceOf(address(this));\\n        uint256 liquidity = balanceOf[address(this)];\\n\\n        bool feeOn = _collectFee(_reserve0, _reserve1);\\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        _amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        _amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n        require(\\n            _amount0 > 0 && _amount1 > 0,\\n            \\\"SwapPairTokens: INSUFFICIENT_LIQUIDITY_BURNED\\\"\\n        );\\n        _burn(address(this), liquidity);\\n        _safeTransfer(_token0, _to, _amount0);\\n        _safeTransfer(_token1, _to, _amount1);\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint256(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Burn(msg.sender, _amount0, _amount1, _to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function mint(address _to) external lock returns (uint256 liquidity) {\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        uint256 balance0 = IERC20(token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20(token1).balanceOf(address(this));\\n        uint256 amount0 = balance0.sub(_reserve0);\\n        uint256 amount1 = balance1.sub(_reserve1);\\n\\n        bool feeOn = _collectFee(_reserve0, _reserve1);\\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\n            _mint(address(0), MINIMUM_LIQUIDITY);\\n            // permanently lock the first MINIMUM_LIQUIDITY tokens\\n        } else {\\n            liquidity = Math.min(\\n                balance0.mul(_totalSupply) / _reserve0,\\n                balance1.mul(_totalSupply) / _reserve1\\n            );\\n        }\\n        require(liquidity > 0, \\\"SwapPairTokens: INSUFFICIENT_LIQUIDITY_MINTED\\\");\\n        _mint(_to, liquidity);\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint256(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function swap(\\n        uint256 _amount0Out,\\n        uint256 _amount1Out,\\n        address _to,\\n        bytes calldata _data\\n    ) external lock {\\n        require(\\n            _amount0Out > 0 || _amount1Out > 0,\\n            \\\"SwapPairTokens: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        require(\\n            _amount0Out < _reserve0 && _amount1Out < _reserve1,\\n            \\\"SwapPairTokens: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n\\n        uint256 balance0;\\n        uint256 balance1;\\n        {\\n            // scope for _token{0,1}, avoids stack too deep errors\\n            address _token0 = token0;\\n            address _token1 = token1;\\n            require(\\n                _to != _token0 && _to != _token1,\\n                \\\"SwapPairTokens: INVALID_TO\\\"\\n            );\\n            if (_amount0Out > 0) _safeTransfer(_token0, _to, _amount0Out); // optimistically transfer tokens\\n            if (_amount1Out > 0) _safeTransfer(_token1, _to, _amount1Out); // optimistically transfer tokens\\n            balance0 = IERC20(_token0).balanceOf(address(this));\\n            balance1 = IERC20(_token1).balanceOf(address(this));\\n        }\\n        uint256 amount0In = balance0 > _reserve0 - _amount0Out\\n            ? balance0 - (_reserve0 - _amount0Out)\\n            : 0;\\n        uint256 amount1In = balance1 > _reserve1 - _amount1Out\\n            ? balance1 - (_reserve1 - _amount1Out)\\n            : 0;\\n        require(\\n            amount0In > 0 || amount1In > 0,\\n            \\\"SwapPairTokens: INSUFFICIENT_INPUT_AMOUNT\\\"\\n        );\\n        {\\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n            uint256 balance0Adjusted = (\\n                balance0.mul(1000).sub(amount0In.mul(3))\\n            );\\n            uint256 balance1Adjusted = (\\n                balance1.mul(1000).sub(amount1In.mul(3))\\n            );\\n            require(\\n                balance0Adjusted.mul(balance1Adjusted) >=\\n                    uint256(_reserve0).mul(_reserve1).mul(1000 ** 2),\\n                \\\"SwapPairTokens: K\\\"\\n            );\\n        }\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n\\n        emit Swap(\\n            msg.sender,\\n            amount0In,\\n            amount1In,\\n            _amount0Out,\\n            _amount1Out,\\n            _to\\n        );\\n    }\\n\\n    // force balances to match reserves\\n    function skim(address _to) external lock {\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        _safeTransfer(\\n            _token0,\\n            _to,\\n            IERC20(_token0).balanceOf(address(this)).sub(reserve0)\\n        );\\n        _safeTransfer(\\n            _token1,\\n            _to,\\n            IERC20(_token1).balanceOf(address(this)).sub(reserve1)\\n        );\\n    }\\n\\n    // force reserves to match balances\\n    function sync() external lock {\\n        _update(\\n            IERC20(token0).balanceOf(address(this)),\\n            IERC20(token1).balanceOf(address(this)),\\n            reserve0,\\n            reserve1\\n        );\\n    }\\n\\n    // update reserves and, on the first call per block, price accumulators\\n    function _update(\\n        uint256 balance0,\\n        uint256 balance1,\\n        uint112 _reserve0,\\n        uint112 _reserve1\\n    ) private {\\n        require(\\n            balance0 <= (2 ** 122 - 1) && balance1 <= (2 ** 122 - 1),\\n            \\\"SwapPairTokens: OVERFLOW\\\"\\n        );\\n        uint32 blockTimestamp = uint32(block.timestamp % 2 ** 32);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            // * never overflows, and + overflow is desired\\n            price0CumulativeLast +=\\n                uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) *\\n                timeElapsed;\\n            price1CumulativeLast +=\\n                uint256(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) *\\n                timeElapsed;\\n        }\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\\n    function _collectFee(\\n        uint112 _reserve0,\\n        uint112 _reserve1\\n    ) private returns (bool feeOn) {\\n        address feeTo = ISwapFactory(factory).feeTo();\\n        feeOn = feeTo != address(0);\\n        uint256 _kLast = kLast; // gas savings\\n        if (feeOn) {\\n            if (_kLast != 0) {\\n                uint256 rootK = Math.sqrt(uint256(_reserve0).mul(_reserve1));\\n                uint256 rootKLast = Math.sqrt(_kLast);\\n                if (rootK > rootKLast) {\\n                    uint256 numerator = totalSupply.mul(rootK.sub(rootKLast));\\n                    uint256 denominator = rootK.mul(5).add(rootKLast);\\n                    uint256 liquidity = numerator / denominator;\\n                    if (liquidity > 0) _mint(feeTo, liquidity);\\n                }\\n            }\\n        } else if (_kLast != 0) {\\n            kLast = 0;\\n        }\\n    }\\n\\n    function _safeTransfer(\\n        address _token,\\n        address _to,\\n        uint256 _value\\n    ) private {\\n        (bool success, bytes memory data) = _token.call(\\n            abi.encodeWithSelector(SELECTOR, _to, _value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"SwapPairTokens: TRANSFER_FAILED\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xbcda8896349a5d747bb58b543b88b4cf3f52f68e6de1b7b1ee03902d4d21d2b7\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/core/SwapTokens.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\nimport \\\"../libraries/safeMath.sol\\\";\\n\\ncontract SwapTokens {\\n    using SafeMath for uint256;\\n\\n    string public constant name = \\\"SwapTokens\\\";\\n    string public constant symbol = \\\"SWT\\\";\\n    uint8 public constant decimals = 18;\\n\\n    uint256 public totalSupply;\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n    mapping(address => uint256) public nonces;\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool) {\\n        _approve(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    function transfer(address _to, uint256 _value) external returns (bool) {\\n        _transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 value\\n    ) external returns (bool) {\\n        if (allowance[_from][msg.sender] != 2 ** 112 - 1) {\\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(\\n                value\\n            );\\n        }\\n        _transfer(_from, _to, value);\\n        return true;\\n    }\\n\\n    function _transfer(address _from, address _to, uint256 value) private {\\n        balanceOf[_from] = balanceOf[_from].sub(value);\\n        balanceOf[_to] = balanceOf[_to].add(value);\\n        emit Transfer(_from, _to, value);\\n    }\\n\\n    function _approve(\\n        address _owner,\\n        address _spender,\\n        uint256 _value\\n    ) private {\\n        require(_spender != address(0), \\\"Spender cannot be 0 address\\\");\\n        require(_owner != address(0), \\\"Owner cannot be 0 address\\\");\\n\\n        allowance[_owner][_spender] = _value;\\n        emit Approval(_owner, _spender, _value);\\n    }\\n\\n    function _mint(address _to, uint256 _value) internal {\\n        totalSupply = totalSupply.add(_value);\\n        balanceOf[_to] = balanceOf[_to].add(_value);\\n        emit Transfer(address(0), _to, _value);\\n    }\\n\\n    function _burn(address _from, uint256 _value) internal {\\n        balanceOf[_from] = balanceOf[_from].sub(_value);\\n        totalSupply = totalSupply.sub(_value);\\n        emit Transfer(_from, address(0), _value);\\n    }\\n}\\n\",\"keccak256\":\"0x80c1f75fe4f3c8cb8f3dbfd3399978f4b684dddd5662f8fa5dfbfbb3306a1218\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\ninterface IERC20 {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function decimals() external view returns (uint256);\\n\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    function allowance(\\n        address _owner,\\n        address _spender\\n    ) external view returns (uint256);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x239f47b2f966a01ac0f60503dec17b3d50e7bd5aaaea4f3fe8c79909d9da3f90\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/interfaces/ISwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\ninterface ISwapFactory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(\\n        address _tokenA,\\n        address _tokenB\\n    ) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(\\n        address _tokenA,\\n        address _tokenB\\n    ) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xc2f14161d78d4db24086450391cd2a50169b380241eee0579dbb158261cc873a\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe2186c62d51c5557f4566a46a19f0c871f7a29b64f2a937799745c630872d32d\",\"license\":\"MIT\"},\"contracts/libraries/UQ112x112.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2 ** 112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0xac19fe79933bc1bc0de133ce83927ff696dbf99335faeb1d3d6fdb4404dd651c\",\"license\":\"MIT\"},\"contracts/libraries/safeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x34c70623bfffa7ec36cd3e291cb5de44bdac27680b88d01719c860fee0758063\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526001600b5534801561001557600080fd5b50600480546001600160a01b03191633179055611f13806100376000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c806370a08231116100c3578063ba9a7a561161007c578063ba9a7a5614610355578063bc25cf771461035e578063c45a015514610371578063d21220a714610384578063dd62ed3e14610397578063fff6cae9146103c257600080fd5b806370a08231146102af5780637464fc3d146102cf5780637ecebe00146102d857806389afcb44146102f857806395d89b4114610320578063a9059cbb1461034257600080fd5b806323b872dd1161011557806323b872dd1461024a578063313ce5671461025d578063485cc955146102775780635909c0d51461028a5780635a3d5493146102935780636a6278421461029c57600080fd5b8063022c0d9f1461015d57806306fdde03146101725780630902f1ac146101b1578063095ea7b3146101e55780630dfe16811461020857806318160ddd14610233575b600080fd5b61017061016b366004611b7c565b6103ca565b005b61019b6040518060400160405280600a81526020016953776170546f6b656e7360b01b81525081565b6040516101a89190611c36565b60405180910390f35b6101b9610880565b604080516001600160701b03948516815293909216602084015263ffffffff16908201526060016101a8565b6101f86101f3366004611c69565b6108aa565b60405190151581526020016101a8565b60055461021b906001600160a01b031681565b6040516001600160a01b0390911681526020016101a8565b61023c60005481565b6040519081526020016101a8565b6101f8610258366004611c95565b6108c1565b610265601281565b60405160ff90911681526020016101a8565b610170610285366004611cd6565b61095a565b61023c60085481565b61023c60095481565b61023c6102aa366004611d0f565b6109e2565b61023c6102bd366004611d0f565b60016020526000908152604090205481565b61023c600a5481565b61023c6102e6366004611d0f565b60036020526000908152604090205481565b61030b610306366004611d0f565b610caf565b604080519283526020830191909152016101a8565b61019b6040518060400160405280600381526020016214d5d560ea1b81525081565b6101f8610350366004611c69565b61101a565b61023c6103e881565b61017061036c366004611d0f565b611027565b60045461021b906001600160a01b031681565b60065461021b906001600160a01b031681565b61023c6103a5366004611cd6565b600260209081526000928352604080842090915290825290205481565b61017061113b565b600b546001146103f55760405162461bcd60e51b81526004016103ec90611d2c565b60405180910390fd5b6000600b55841515806104085750600084115b6104675760405162461bcd60e51b815260206004820152602a60248201527f5377617050616972546f6b656e733a20494e53554646494349454e545f4f555460448201526914155517d05353d5539560b21b60648201526084016103ec565b600080610472610880565b5091509150816001600160701b0316871080156104975750806001600160701b031686105b6104f25760405162461bcd60e51b815260206004820152602660248201527f5377617050616972546f6b656e733a20494e53554646494349454e545f4c495160448201526555494449545960d01b60648201526084016103ec565b60055460065460009182916001600160a01b039182169190811690891682148015906105305750806001600160a01b0316896001600160a01b031614155b61057c5760405162461bcd60e51b815260206004820152601a60248201527f5377617050616972546f6b656e733a20494e56414c49445f544f00000000000060448201526064016103ec565b8a1561058d5761058d828a8d61125f565b891561059e5761059e818a8c61125f565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa1580156105e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106069190611d5c565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a0823190602401602060405180830381865afa15801561064d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106719190611d5c565b92505050600089856001600160701b031661068c9190611d8b565b83116106995760006106b6565b6106ac8a6001600160701b038716611d8b565b6106b69084611d8b565b905060006106cd8a6001600160701b038716611d8b565b83116106da5760006106f7565b6106ed8a6001600160701b038716611d8b565b6106f79084611d8b565b905060008211806107085750600081115b6107665760405162461bcd60e51b815260206004820152602960248201527f5377617050616972546f6b656e733a20494e53554646494349454e545f494e50604482015268155517d05353d5539560ba1b60648201526084016103ec565b60006107886107768460036113aa565b610782876103e86113aa565b90611411565b9050600061079a6107768460036113aa565b90506107bf620f42406107b96001600160701b038b8116908b166113aa565b906113aa565b6107c983836113aa565b101561080b5760405162461bcd60e51b81526020600482015260116024820152705377617050616972546f6b656e733a204b60781b60448201526064016103ec565b505061081984848888611467565b60408051838152602081018390529081018c9052606081018b90526001600160a01b038a169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a350506001600b55505050505050505050565b6007546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b60006108b733848461165d565b5060015b92915050565b6001600160a01b03831660009081526002602090815260408083203384529091528120546001600160701b0314610945576001600160a01b03841660009081526002602090815260408083203384529091529020546109209083611411565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b61095084848461176b565b5060019392505050565b6004546001600160a01b031633146109b45760405162461bcd60e51b815260206004820152601960248201527f5377617050616972546f6b656e733a20464f5242494444454e0000000000000060448201526064016103ec565b600580546001600160a01b039384166001600160a01b03199182161790915560068054929093169116179055565b6000600b54600114610a065760405162461bcd60e51b81526004016103ec90611d2c565b6000600b81905580610a16610880565b506005546040516370a0823160e01b81523060048201529294509092506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610a68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8c9190611d5c565b6006546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610ada573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afe9190611d5c565b90506000610b15836001600160701b038716611411565b90506000610b2c836001600160701b038716611411565b90506000610b3a8787611811565b60008054919250819003610b7457610b606103e8610782610b5b87876113aa565b611940565b9850610b6f60006103e86119b0565b610bbb565b610bb86001600160701b038916610b8b88846113aa565b610b959190611db4565b6001600160701b038916610ba988856113aa565b610bb39190611db4565b611a3f565b98505b60008911610c215760405162461bcd60e51b815260206004820152602d60248201527f5377617050616972546f6b656e733a20494e53554646494349454e545f4c495160448201526c15525112551657d35253951151609a1b60648201526084016103ec565b610c2b8a8a6119b0565b610c3786868a8a611467565b8115610c6157600754610c5d906001600160701b0380821691600160701b9004166113aa565b600a555b604080518581526020810185905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a250506001600b5550949695505050505050565b600080600b54600114610cd45760405162461bcd60e51b81526004016103ec90611d2c565b6000600b81905580610ce4610880565b506005546006546040516370a0823160e01b81523060048201529395509193506001600160a01b039081169291169060009083906370a0823190602401602060405180830381865afa158015610d3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d629190611d5c565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610dac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd09190611d5c565b30600090815260016020526040812054919250610ded8888611811565b60005490915080610dfe84876113aa565b610e089190611db4565b9a5080610e1584866113aa565b610e1f9190611db4565b995060008b118015610e31575060008a115b610e935760405162461bcd60e51b815260206004820152602d60248201527f5377617050616972546f6b656e733a20494e53554646494349454e545f4c495160448201526c15525112551657d09554939151609a1b60648201526084016103ec565b610e9d3084611a57565b610ea8878d8d61125f565b610eb3868d8c61125f565b6040516370a0823160e01b81523060048201526001600160a01b038816906370a0823190602401602060405180830381865afa158015610ef7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1b9190611d5c565b6040516370a0823160e01b81523060048201529095506001600160a01b038716906370a0823190602401602060405180830381865afa158015610f62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f869190611d5c565b9350610f9485858b8b611467565b8115610fbe57600754610fba906001600160701b0380821691600160701b9004166113aa565b600a555b604080518c8152602081018c90526001600160a01b038e169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a35050505050505050506001600b81905550915091565b60006108b733848461176b565b600b546001146110495760405162461bcd60e51b81526004016103ec90611d2c565b6000600b556005546006546007546040516370a0823160e01b81523060048201526001600160a01b0393841693909216916110e491849186916110df916001600160701b039091169084906370a08231906024015b602060405180830381865afa1580156110bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107829190611d5c565b61125f565b6007546040516370a0823160e01b815230600482015261113191839186916110df91600160701b9091046001600160701b0316906001600160a01b038516906370a082319060240161109e565b50506001600b5550565b600b5460011461115d5760405162461bcd60e51b81526004016103ec90611d2c565b6000600b556005546040516370a0823160e01b8152306004820152611258916001600160a01b0316906370a0823190602401602060405180830381865afa1580156111ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d09190611d5c565b6006546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611218573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123c9190611d5c565b6007546001600160701b0380821691600160701b900416611467565b6001600b55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b179052915160009283928716916112eb9190611dc8565b6000604051808303816000865af19150503d8060008114611328576040519150601f19603f3d011682016040523d82523d6000602084013e61132d565b606091505b50915091508180156113575750805115806113575750808060200190518101906113579190611de4565b6113a35760405162461bcd60e51b815260206004820152601f60248201527f5377617050616972546f6b656e733a205452414e534645525f4641494c45440060448201526064016103ec565b5050505050565b60008115806113ce575082826113c08183611e06565b92506113cc9083611db4565b145b6108bb5760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b60448201526064016103ec565b60008261141e8382611d8b565b91508111156108bb5760405162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b60448201526064016103ec565b60016001607a1b038411158015611485575060016001607a1b038311155b6114d15760405162461bcd60e51b815260206004820152601860248201527f5377617050616972546f6b656e733a204f564552464c4f57000000000000000060448201526064016103ec565b60006114e264010000000042611e1d565b60075490915060009061150290600160e01b900463ffffffff1683611e31565b905060008163ffffffff1611801561152257506001600160701b03841615155b801561153657506001600160701b03831615155b156115c5578063ffffffff1661155e8561154f86611ae1565b6001600160e01b031690611afa565b6001600160e01b03166115719190611e06565b600860008282546115829190611e55565b909155505063ffffffff811661159b8461154f87611ae1565b6001600160e01b03166115ae9190611e06565b600960008282546115bf9190611e55565b90915550505b6007805463ffffffff8416600160e01b026001600160e01b036001600160701b03898116600160701b9081026001600160e01b03199095168c83161794909417918216831794859055604080519382169282169290921783529290930490911660208201527fcf2aa50876cdfbb541206f89af0ee78d44a2abf8d328e37fa4917f982149848a910160405180910390a1505050505050565b6001600160a01b0382166116b35760405162461bcd60e51b815260206004820152601b60248201527f5370656e6465722063616e6e6f7420626520302061646472657373000000000060448201526064016103ec565b6001600160a01b0383166117095760405162461bcd60e51b815260206004820152601960248201527f4f776e65722063616e6e6f74206265203020616464726573730000000000000060448201526064016103ec565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b03831660009081526001602052604090205461178e9082611411565b6001600160a01b0380851660009081526001602052604080822093909355908416815220546117bd9082611b0f565b6001600160a01b0380841660008181526001602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061175e9085815260200190565b6004805460408051622fcfcb60e31b8152905160009384936001600160a01b03169263017e7e5892818301926020928290030181865afa158015611859573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187d9190611e68565b600a546001600160a01b03821615801594509192509061192c5780156119275760006118b8610b5b6001600160701b038881169088166113aa565b905060006118c583611940565b9050808211156119245760006118e76118de8484611411565b600054906113aa565b90506000611900836118fa8660056113aa565b90611b0f565b9050600061190e8284611db4565b905080156119205761192087826119b0565b5050505b50505b611938565b8015611938576000600a555b505092915050565b600060038211156119a1575080600061195a600283611db4565b611965906001611e55565b90505b8181101561199b579050806002816119808186611db4565b61198a9190611e55565b6119949190611db4565b9050611968565b50919050565b81156119ab575060015b919050565b6000546119bd9082611b0f565b60009081556001600160a01b0383168152600160205260409020546119e29082611b0f565b6001600160a01b0383166000818152600160205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611a339085815260200190565b60405180910390a35050565b6000818310611a4e5781611a50565b825b9392505050565b6001600160a01b038216600090815260016020526040902054611a7a9082611411565b6001600160a01b03831660009081526001602052604081209190915554611aa19082611411565b60009081556040518281526001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611a33565b60006108bb600160701b6001600160701b038416611e85565b6000611a506001600160701b03831684611eb7565b600082611b1c8382611e55565b91508110156108bb5760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b60448201526064016103ec565b6001600160a01b0381168114611b7957600080fd5b50565b600080600080600060808688031215611b9457600080fd5b85359450602086013593506040860135611bad81611b64565b9250606086013567ffffffffffffffff80821115611bca57600080fd5b818801915088601f830112611bde57600080fd5b813581811115611bed57600080fd5b896020828501011115611bff57600080fd5b9699959850939650602001949392505050565b60005b83811015611c2d578181015183820152602001611c15565b50506000910152565b6020815260008251806020840152611c55816040850160208701611c12565b601f01601f19169190910160400192915050565b60008060408385031215611c7c57600080fd5b8235611c8781611b64565b946020939093013593505050565b600080600060608486031215611caa57600080fd5b8335611cb581611b64565b92506020840135611cc581611b64565b929592945050506040919091013590565b60008060408385031215611ce957600080fd5b8235611cf481611b64565b91506020830135611d0481611b64565b809150509250929050565b600060208284031215611d2157600080fd5b8135611a5081611b64565b60208082526016908201527514ddd85c14185a5c951bdad95b9cce881313d0d2d15160521b604082015260600190565b600060208284031215611d6e57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156108bb576108bb611d75565b634e487b7160e01b600052601260045260246000fd5b600082611dc357611dc3611d9e565b500490565b60008251611dda818460208701611c12565b9190910192915050565b600060208284031215611df657600080fd5b81518015158114611a5057600080fd5b80820281158282048414176108bb576108bb611d75565b600082611e2c57611e2c611d9e565b500690565b63ffffffff828116828216039080821115611e4e57611e4e611d75565b5092915050565b808201808211156108bb576108bb611d75565b600060208284031215611e7a57600080fd5b8151611a5081611b64565b6001600160e01b03828116828216818102831692918115828504821417611eae57611eae611d75565b50505092915050565b60006001600160e01b0383811680611ed157611ed1611d9e565b9216919091049291505056fea264697066735822122032ab8a9cf435f992989bb0d203a2de29eb55216fbada752bdbdd122c0a6e266b64736f6c63430008130033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3513,
        "contract": "contracts/core/SwapPairTokens.sol:SwapPairTokens",
        "label": "totalSupply",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3517,
        "contract": "contracts/core/SwapPairTokens.sol:SwapPairTokens",
        "label": "balanceOf",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3523,
        "contract": "contracts/core/SwapPairTokens.sol:SwapPairTokens",
        "label": "allowance",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3527,
        "contract": "contracts/core/SwapPairTokens.sol:SwapPairTokens",
        "label": "nonces",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2024,
        "contract": "contracts/core/SwapPairTokens.sol:SwapPairTokens",
        "label": "factory",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2026,
        "contract": "contracts/core/SwapPairTokens.sol:SwapPairTokens",
        "label": "token0",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 2028,
        "contract": "contracts/core/SwapPairTokens.sol:SwapPairTokens",
        "label": "token1",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2030,
        "contract": "contracts/core/SwapPairTokens.sol:SwapPairTokens",
        "label": "reserve0",
        "offset": 0,
        "slot": "7",
        "type": "t_uint112"
      },
      {
        "astId": 2032,
        "contract": "contracts/core/SwapPairTokens.sol:SwapPairTokens",
        "label": "reserve1",
        "offset": 14,
        "slot": "7",
        "type": "t_uint112"
      },
      {
        "astId": 2034,
        "contract": "contracts/core/SwapPairTokens.sol:SwapPairTokens",
        "label": "blockTimestampLast",
        "offset": 28,
        "slot": "7",
        "type": "t_uint32"
      },
      {
        "astId": 2036,
        "contract": "contracts/core/SwapPairTokens.sol:SwapPairTokens",
        "label": "price0CumulativeLast",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2038,
        "contract": "contracts/core/SwapPairTokens.sol:SwapPairTokens",
        "label": "price1CumulativeLast",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2040,
        "contract": "contracts/core/SwapPairTokens.sol:SwapPairTokens",
        "label": "kLast",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2043,
        "contract": "contracts/core/SwapPairTokens.sol:SwapPairTokens",
        "label": "unlocked",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint112": {
        "encoding": "inplace",
        "label": "uint112",
        "numberOfBytes": "14"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}