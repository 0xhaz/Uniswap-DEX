{
  "address": "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountADesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountBDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountTokenDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reserveOut",
          "type": "uint256"
        }
      ],
      "name": "getAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reserveOut",
          "type": "uint256"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        }
      ],
      "name": "getLiquidityAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidityAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        }
      ],
      "name": "getReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reserveB",
          "type": "uint256"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "swapETHForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactETHForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForETH",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactETH",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x5b40ba66fd70f6d0d4ccf6cd5b839810d1dea4f47e2fd5fc3e06c2fe38b6bda3",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
    "transactionIndex": 0,
    "gasUsed": "2776579",
    "logsBloom": "0x
    "blockHash": "0x0a5760a159b239aeb5458c2084d1704219a2aa79c73b7499a65c296d30889b5a",
    "transactionHash": "0x5b40ba66fd70f6d0d4ccf6cd5b839810d1dea4f47e2fd5fc3e06c2fe38b6bda3",
    "logs": [],
    "blockNumber": 10,
    "cumulativeGasUsed": "2776579",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
    "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853"
  ],
  "numDeployments": 1,
  "solcInputHash": "ff3f472e5438dd7d355c924648416203",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountTokenDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"name\":\"getLiquidityAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"name\":\"getReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveB\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swapETHForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/router/SwapRouter.sol\":\"SwapRouter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\ninterface IERC20 {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function decimals() external view returns (uint256);\\n\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    function allowance(\\n        address _owner,\\n        address _spender\\n    ) external view returns (uint256);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x239f47b2f966a01ac0f60503dec17b3d50e7bd5aaaea4f3fe8c79909d9da3f90\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/interfaces/IRToken.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\ninterface IRToken {\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _spender,\\n        uint256 _value\\n    );\\n\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n\\n    event Deposit(address indexed _owner, uint256 _value);\\n\\n    event Withdraw(address indexed _owner, uint256 _value);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    function allowance(\\n        address _owner,\\n        address _spender\\n    ) external view returns (uint256);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 _value) external;\\n}\\n\",\"keccak256\":\"0x2ba369bf34e7fb88d86320f44ad59b1c92cb5140760fc3e71de6335ac44762ef\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/interfaces/ISwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\ninterface ISwapFactory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(\\n        address _tokenA,\\n        address _tokenB\\n    ) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(\\n        address _tokenA,\\n        address _tokenB\\n    ) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xc2f14161d78d4db24086450391cd2a50169b380241eee0579dbb158261cc873a\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/interfaces/ISwapPairTokens.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\ninterface ISwapPairTokens {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    function allowance(\\n        address _owner,\\n        address _spender\\n    ) external view returns (uint256);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool);\\n\\n    function permit(\\n        address _owner,\\n        address _spender,\\n        uint256 _value,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n\\n    function MINIMUM_LIQUIDITY() external view returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address _to) external returns (uint256 liquidity);\\n\\n    function burn(\\n        address _to\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 _amount0Out,\\n        uint256 _amount1Out,\\n        address _to,\\n        bytes calldata _data\\n    ) external;\\n\\n    function skim(address _to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address _token0, address _token1) external;\\n}\\n\",\"keccak256\":\"0xd655a8334249a1897b4822098a5ac178ce1593f242fe2478f760e1b580cc1047\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\ninterface IWETH {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Deposit(address indexed account, uint256 amount);\\n    event Withdrawal(address indexed account, uint256 amount);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    function allowance(\\n        address _owner,\\n        address _spender\\n    ) external view returns (uint256);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x9c7c54a21c523011d772b7ddf932f95f5d70a7b10d4e755e13b049d51ad05c8b\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/libraries/SwapLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\nimport \\\"../interfaces/ISwapPairTokens.sol\\\";\\nimport \\\"../interfaces/ISwapFactory.sol\\\";\\nimport \\\"../libraries/safeMath.sol\\\";\\n\\nlibrary SwapLibrary {\\n    using SafeMath for uint256;\\n\\n    function sortTokens(\\n        address _tokenA,\\n        address _tokenB\\n    ) internal pure returns (address token0, address token1) {\\n        require(_tokenA != _tokenB, \\\"SwapLibrary: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = _tokenA < _tokenB\\n            ? (_tokenA, _tokenB)\\n            : (_tokenB, _tokenA);\\n        require(token0 != address(0), \\\"SwapLibrary: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address _factory,\\n        address _tokenA,\\n        address _tokenB\\n    ) internal view returns (address pair) {\\n        (address token0, address token1) = sortTokens(_tokenA, _tokenB);\\n        pair = ISwapFactory(_factory).getPair(token0, token1);\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address _factory,\\n        address _tokenA,\\n        address _tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(_tokenA, _tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = ISwapPairTokens(\\n            pairFor(_factory, _tokenA, _tokenB)\\n        ).getReserves();\\n        (reserveA, reserveB) = _tokenA == token0\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of other asset\\n    function quote(\\n        uint256 _amountA,\\n        uint256 _reserveA,\\n        uint256 _reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(_amountA > 0, \\\"SwapLibrary: INSUFFICIENT_AMOUNT\\\");\\n        require(\\n            _reserveA > 0 && _reserveB > 0,\\n            \\\"SwapLibrary: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        amountB = _amountA.mul(_reserveB) / _reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 _amountIn,\\n        uint256 _reserveIn,\\n        uint256 _reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(_amountIn > 0, \\\"SwapLibrary: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(\\n            _reserveIn > 0 && _reserveOut > 0,\\n            \\\"SwapLibrary: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 amountInWithFee = _amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(_reserveOut);\\n        uint256 denominator = _reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 _amountOut,\\n        uint256 _reserveIn,\\n        uint256 _reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(_amountOut > 0, \\\"SwapLibrary: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(\\n            _reserveIn > 0 && _reserveOut > 0,\\n            \\\"SwapLibrary: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 numerator = _reserveIn.mul(_amountOut).mul(1000);\\n        uint256 denominator = _reserveOut.sub(_amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address _factory,\\n        uint256 _amountIn,\\n        address[] memory _path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(_path.length >= 2, \\\"SwapLibrary: INVALID_PATH\\\");\\n        amounts = new uint256[](_path.length);\\n        amounts[0] = _amountIn;\\n        for (uint256 i; i < _path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n                _factory,\\n                _path[i],\\n                _path[i + 1]\\n            );\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address _factory,\\n        uint256 _amountOut,\\n        address[] memory _path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(_path.length >= 2, \\\"SwapLibrary: INVALID_PATH\\\");\\n        amounts = new uint256[](_path.length);\\n        amounts[amounts.length - 1] = _amountOut;\\n        for (uint256 i = _path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n                _factory,\\n                _path[i - 1],\\n                _path[i]\\n            );\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xca88f5e55d6c6aeb337bf27576ebf24eefb08b9f3ff847a2cb31c077c0870092\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint256 value) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: APPROVE_FAILED\\\"\\n        );\\n    }\\n\\n    function safeTransfer(address token, address to, uint256 value) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FROM_FAILED\\\"\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x98073686d89bc283e6e98950435f46ae368af757a1cbe819b2e9a10ef077d174\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/libraries/safeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x34c70623bfffa7ec36cd3e291cb5de44bdac27680b88d01719c860fee0758063\",\"license\":\"MIT\"},\"contracts/router/SwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\nimport \\\"../libraries/SwapLibrary.sol\\\";\\nimport \\\"../libraries/TransferHelper.sol\\\";\\nimport \\\"../libraries/safeMath.sol\\\";\\nimport \\\"../interfaces/ISwapFactory.sol\\\";\\nimport \\\"../interfaces/ISwapPairTokens.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"../interfaces/IRToken.sol\\\";\\n\\ncontract SwapRouter {\\n    using SafeMath for uint256;\\n\\n    address public immutable factory;\\n    address public immutable WETH;\\n\\n    modifier ensure(uint256 deadline) {\\n        require(deadline >= block.timestamp, \\\"EXPIRED\\\");\\n        _;\\n    }\\n\\n    constructor(address _factory, address _WETH) {\\n        factory = _factory;\\n        WETH = _WETH;\\n    }\\n\\n    receive() external payable {\\n        assert(msg.sender == WETH);\\n        // only accept ETH via fallback from the WETH contract\\n    }\\n\\n    function getLiquidityAmount(\\n        address _user,\\n        address _tokenA,\\n        address _tokenB\\n    ) public view returns (uint256 liquidityAmount) {\\n        address pair = ISwapFactory(factory).getPair(_tokenA, _tokenB);\\n        liquidityAmount = ISwapPairTokens(pair).balanceOf(_user);\\n    }\\n\\n    /**\\n     * @dev Add liquidity to a pool\\n     * @param _tokenA - the first token of the pair\\n     * @param _tokenB - the second token of the pair\\n     * @param _amountAMin - the minimum amount of the first token to add as liquidity\\n     * @param _amountBMin - the minimum amount of the second token to add as liquidity\\n     * @param _amountADesired - the desired amount of the first token to add as liquidity\\n     * @param _amountBDesired - the desired amount of the second token to add as liquidity\\n     */\\n    function _addLiquidity(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _amountADesired,\\n        uint256 _amountBDesired,\\n        uint256 _amountAMin,\\n        uint256 _amountBMin\\n    ) internal virtual returns (uint256 amountA, uint256 amountB) {\\n        if (ISwapFactory(factory).getPair(_tokenA, _tokenB) == address(0)) {\\n            ISwapFactory(factory).createPair(_tokenA, _tokenB);\\n        }\\n        (uint256 reserveA, uint256 reserveB) = SwapLibrary.getReserves(\\n            factory,\\n            _tokenA,\\n            _tokenB\\n        );\\n\\n        if (reserveA == 0 && reserveB == 0) {\\n            (amountA, amountB) = (_amountADesired, _amountBDesired);\\n        } else {\\n            uint256 amountBOptimal = SwapLibrary.quote(\\n                _amountADesired,\\n                reserveA,\\n                reserveB\\n            );\\n            if (amountBOptimal <= _amountBDesired) {\\n                require(amountBOptimal >= _amountBMin, \\\"INSUFFICIENT_B_AMOUNT\\\");\\n                (amountA, amountB) = (_amountADesired, amountBOptimal);\\n            } else {\\n                uint256 amountAOptimal = SwapLibrary.quote(\\n                    _amountBDesired,\\n                    reserveB,\\n                    reserveA\\n                );\\n                assert(amountAOptimal <= _amountADesired);\\n                require(amountAOptimal >= _amountAMin, \\\"INSUFFICIENT_A_AMOUNT\\\");\\n                (amountA, amountB) = (amountAOptimal, _amountBDesired);\\n            }\\n        }\\n    }\\n\\n    function addLiquidity(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _amountADesired,\\n        uint256 _amountBDesired,\\n        uint256 _amountAMin,\\n        uint256 _amountBMin,\\n        address _to,\\n        uint256 _deadline\\n    )\\n        external\\n        virtual\\n        ensure(_deadline)\\n        returns (uint256 amountA, uint256 amountB, uint256 liquidity)\\n    {\\n        (amountA, amountB) = _addLiquidity(\\n            _tokenA,\\n            _tokenB,\\n            _amountADesired,\\n            _amountBDesired,\\n            _amountAMin,\\n            _amountBMin\\n        );\\n\\n        address pair = SwapLibrary.pairFor(factory, _tokenA, _tokenB);\\n        TransferHelper.safeTransferFrom(_tokenA, msg.sender, pair, amountA);\\n        TransferHelper.safeTransferFrom(_tokenB, msg.sender, pair, amountB);\\n        liquidity = ISwapPairTokens(pair).mint(_to);\\n    }\\n\\n    function addLiquidityETH(\\n        address _token,\\n        uint256 _amountTokenDesired,\\n        uint256 _amountTokenMin,\\n        uint256 _amountETHMin,\\n        address _to,\\n        uint256 _deadline\\n    )\\n        external\\n        payable\\n        virtual\\n        ensure(_deadline)\\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity)\\n    {\\n        (amountToken, amountETH) = _addLiquidity(\\n            _token,\\n            WETH,\\n            _amountTokenDesired,\\n            msg.value,\\n            _amountTokenMin,\\n            _amountETHMin\\n        );\\n        address pair = SwapLibrary.pairFor(factory, _token, WETH);\\n        TransferHelper.safeTransferFrom(_token, msg.sender, pair, amountToken);\\n        IWETH(WETH).deposit{value: amountETH}();\\n        assert(IWETH(WETH).transfer(pair, amountETH));\\n        liquidity = ISwapPairTokens(pair).mint(_to);\\n        if (msg.value > amountETH) {\\n            TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);\\n        }\\n    }\\n\\n    function removeLiquidity(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _liquidity,\\n        uint256 _amountAMin,\\n        uint256 _amountBMin,\\n        address _to,\\n        uint256 _deadline\\n    )\\n        public\\n        virtual\\n        ensure(_deadline)\\n        returns (uint256 amountA, uint256 amountB)\\n    {\\n        address pair = SwapLibrary.pairFor(factory, _tokenA, _tokenB);\\n        ISwapPairTokens(pair).transferFrom(msg.sender, pair, _liquidity);\\n        (uint256 amount0, uint256 amount1) = ISwapPairTokens(pair).burn(_to);\\n        (address token0, ) = SwapLibrary.sortTokens(_tokenA, _tokenB);\\n        (amountA, amountB) = _tokenA == token0\\n            ? (amount0, amount1)\\n            : (amount1, amount0);\\n\\n        require(amountA >= _amountAMin, \\\"INSUFFICIENT_A_AMOUNT\\\");\\n        require(amountB >= _amountBMin, \\\"INSUFFICIENT_B_AMOUNT\\\");\\n    }\\n\\n    function removeLiquidityETH(\\n        address _token,\\n        uint256 _liquidity,\\n        uint256 _amountTokenMin,\\n        uint256 _amountETHMin,\\n        address _to,\\n        uint256 _deadline\\n    )\\n        public\\n        virtual\\n        ensure(_deadline)\\n        returns (uint256 amountToken, uint256 amountETH)\\n    {\\n        (amountToken, amountETH) = removeLiquidity(\\n            _token,\\n            WETH,\\n            _liquidity,\\n            _amountTokenMin,\\n            _amountETHMin,\\n            address(this),\\n            _deadline\\n        );\\n        TransferHelper.safeTransfer(_token, _to, amountToken);\\n        IWETH(WETH).withdraw(amountETH);\\n        TransferHelper.safeTransferETH(_to, amountETH);\\n    }\\n\\n    function _swap(\\n        uint256[] memory _amounts,\\n        address[] memory _path,\\n        address _to\\n    ) internal virtual {\\n        for (uint256 i; i < _path.length - 1; i++) {\\n            (address input, address output) = (_path[i], _path[i + 1]);\\n            (address token0, ) = SwapLibrary.sortTokens(input, output);\\n            uint256 amountOut = _amounts[i + 1];\\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\\n                ? (uint256(0), amountOut)\\n                : (amountOut, uint256(0));\\n            address to = i < _path.length - 2\\n                ? SwapLibrary.pairFor(factory, output, _path[i + 2])\\n                : _to;\\n            ISwapPairTokens(SwapLibrary.pairFor(factory, input, output)).swap(\\n                amount0Out,\\n                amount1Out,\\n                to,\\n                new bytes(0)\\n            );\\n        }\\n    }\\n\\n    function swapExactTokensForTokens(\\n        uint256 _amountIn,\\n        uint256 _amountOutMin,\\n        address[] calldata _path,\\n        address _to,\\n        uint256 _deadline\\n    ) external virtual ensure(_deadline) returns (uint256[] memory amounts) {\\n        amounts = SwapLibrary.getAmountsOut(factory, _amountIn, _path);\\n        require(\\n            amounts[amounts.length - 1] >= _amountOutMin,\\n            \\\"INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        TransferHelper.safeTransferFrom(\\n            _path[0],\\n            msg.sender,\\n            SwapLibrary.pairFor(factory, _path[0], _path[1]),\\n            amounts[0]\\n        );\\n        _swap(amounts, _path, _to);\\n    }\\n\\n    function swapTokensForExactTokens(\\n        uint256 _amountOut,\\n        uint256 _amountInMax,\\n        address[] calldata _path,\\n        address _to,\\n        uint256 _deadline\\n    ) external virtual ensure(_deadline) returns (uint256[] memory amounts) {\\n        amounts = SwapLibrary.getAmountsIn(factory, _amountOut, _path);\\n        require(amounts[0] <= _amountInMax, \\\"EXCESSIVE_INPUT_AMOUNT\\\");\\n        TransferHelper.safeTransferFrom(\\n            _path[0],\\n            msg.sender,\\n            SwapLibrary.pairFor(factory, _path[0], _path[1]),\\n            amounts[0]\\n        );\\n        _swap(amounts, _path, _to);\\n    }\\n\\n    function swapExactETHForTokens(\\n        uint256 _amountOutMin,\\n        address[] calldata _path,\\n        address _to,\\n        uint256 _deadline\\n    )\\n        external\\n        payable\\n        virtual\\n        ensure(_deadline)\\n        returns (uint256[] memory amounts)\\n    {\\n        require(_path[0] == WETH, \\\"INVALID_PATH\\\");\\n        amounts = SwapLibrary.getAmountsOut(factory, msg.value, _path);\\n        require(\\n            amounts[amounts.length - 1] >= _amountOutMin,\\n            \\\"INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        IWETH(WETH).deposit{value: amounts[0]}();\\n        assert(\\n            IWETH(WETH).transfer(\\n                SwapLibrary.pairFor(factory, _path[0], _path[1]),\\n                amounts[0]\\n            )\\n        );\\n        _swap(amounts, _path, _to);\\n    }\\n\\n    function swapETHForExactTokens(\\n        uint256 _amountOut,\\n        address[] calldata _path,\\n        address _to,\\n        uint256 _deadline\\n    )\\n        external\\n        payable\\n        virtual\\n        ensure(_deadline)\\n        returns (uint256[] memory amounts)\\n    {\\n        require(_path[0] == WETH, \\\"INVALID_PATH\\\");\\n        amounts = SwapLibrary.getAmountsIn(factory, _amountOut, _path);\\n        require(amounts[0] <= msg.value, \\\"EXCESSIVE_INPUT_AMOUNT\\\");\\n        IWETH(WETH).deposit{value: amounts[0]}();\\n        assert(\\n            IWETH(WETH).transfer(\\n                SwapLibrary.pairFor(factory, _path[0], _path[1]),\\n                amounts[0]\\n            )\\n        );\\n        _swap(amounts, _path, _to);\\n        if (msg.value > amounts[0])\\n            TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\\n    }\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata _path,\\n        address _to,\\n        uint256 _deadline\\n    ) external virtual ensure(_deadline) returns (uint256[] memory amounts) {\\n        require(_path[_path.length - 1] == WETH, \\\"INVALID_PATH\\\");\\n        amounts = SwapLibrary.getAmountsIn(factory, amountOut, _path);\\n        require(amounts[0] <= amountInMax, \\\"EXCESSIVE_INPUT_AMOUNT\\\");\\n        TransferHelper.safeTransferFrom(\\n            _path[0],\\n            msg.sender,\\n            SwapLibrary.pairFor(factory, _path[0], _path[1]),\\n            amounts[0]\\n        );\\n        _swap(amounts, _path, address(this));\\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\\n        TransferHelper.safeTransferETH(_to, amounts[amounts.length - 1]);\\n    }\\n\\n    function swapExactTokensForETH(\\n        uint256 _amountIn,\\n        uint256 _amountOutMin,\\n        address[] calldata _path,\\n        address _to,\\n        uint256 _deadline\\n    ) external virtual ensure(_deadline) returns (uint256[] memory amounts) {\\n        require(_path[_path.length - 1] == WETH, \\\"INVALID_PATH\\\");\\n        amounts = SwapLibrary.getAmountsOut(factory, _amountIn, _path);\\n        require(\\n            amounts[amounts.length - 1] >= _amountOutMin,\\n            \\\"INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        TransferHelper.safeTransferFrom(\\n            _path[0],\\n            msg.sender,\\n            SwapLibrary.pairFor(factory, _path[0], _path[1]),\\n            amounts[0]\\n        );\\n        _swap(amounts, _path, address(this));\\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\\n        TransferHelper.safeTransferETH(_to, amounts[amounts.length - 1]);\\n    }\\n\\n    function getReserve(\\n        address _tokenA,\\n        address _tokenB\\n    ) public view returns (uint256 reserveA, uint256 reserveB) {\\n        (reserveA, reserveB) = SwapLibrary.getReserves(\\n            factory,\\n            _tokenA,\\n            _tokenB\\n        );\\n    }\\n\\n    function quote(\\n        uint256 _amountA,\\n        uint256 _reserveA,\\n        uint256 _reserveB\\n    ) public pure virtual returns (uint256 amountB) {\\n        return SwapLibrary.quote(_amountA, _reserveA, _reserveB);\\n    }\\n\\n    function getAmountOut(\\n        uint256 _amountIn,\\n        uint256 _reserveIn,\\n        uint256 _reserveOut\\n    ) public pure virtual returns (uint256 amountOut) {\\n        return SwapLibrary.getAmountOut(_amountIn, _reserveIn, _reserveOut);\\n    }\\n\\n    function getAmountIn(\\n        uint256 _amountOut,\\n        uint256 _reserveIn,\\n        uint256 _reserveOut\\n    ) public pure virtual returns (uint256 amountIn) {\\n        return SwapLibrary.getAmountIn(_amountOut, _reserveIn, _reserveOut);\\n    }\\n\\n    function getAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path\\n    ) public view virtual returns (uint256[] memory amounts) {\\n        return SwapLibrary.getAmountsOut(factory, _amountIn, _path);\\n    }\\n\\n    function getAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path\\n    ) public view virtual returns (uint256[] memory amounts) {\\n        return SwapLibrary.getAmountsIn(factory, _amountOut, _path);\\n    }\\n}\\n\",\"keccak256\":\"0xae01f525a6b25234c4fd492443dde7aac420b3cf79bf42ae913ed252ae0dc18f\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200332838038062003328833981016040819052620000349162000069565b6001600160a01b039182166080521660a052620000a1565b80516001600160a01b03811681146200006457600080fd5b919050565b600080604083850312156200007d57600080fd5b62000088836200004c565b915062000098602084016200004c565b90509250929050565b60805160a05161315e620001ca60003960008181610128015281816102b601528181610458015281816104a70152818161056301528181610786015281816109e601528181610b1c01528181610c3a01528181610cc8015281816113c50152818161141b0152818161144f015281816114e40152818161161d0152818161172f01526117bd015260008181610342015281816105df015281816106b10152818161086c015281816108c301528181610a6201528181610b9701528181610cfa01528181610e6d01528181610f3a0152818161112f01528181611167015281816111cd015281816112b7015281816113f901528181611698015281816117ef015281816120350152818161208501528181612614015281816126b6015261272d015261315e6000f3fe6080604052600436106101185760003560e01c8063ad5c4648116100a0578063d06ca61f11610064578063d06ca61f14610384578063e8e33700146103a4578063f09a5a9d146103df578063f305d719146103ff578063fb3bdb411461041257600080fd5b8063ad5c4648146102a4578063ad615dec146102f0578063baa2abde14610310578063c45a015514610330578063cbc3ab531461036457600080fd5b806338ed1739116100e757806338ed1739146102115780634a25d94a146102315780637ff36ab51461025157806385f8c259146102645780638803dbee1461028457600080fd5b806302751cec1461015c578063054d50d41461019657806318cbafe5146101c45780631f00ca74146101f157600080fd5b3661015757336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101555761015561296c565b005b600080fd5b34801561016857600080fd5b5061017c6101773660046129aa565b610425565b604080519283526020830191909152015b60405180910390f35b3480156101a257600080fd5b506101b66101b1366004612a08565b610521565b60405190815260200161018d565b3480156101d057600080fd5b506101e46101df366004612a79565b610536565b60405161018d9190612aec565b3480156101fd57600080fd5b506101e461020c366004612b46565b610865565b34801561021d57600080fd5b506101e461022c366004612a79565b61089b565b34801561023d57600080fd5b506101e461024c366004612a79565b6109b9565b6101e461025f366004612c17565b610af7565b34801561027057600080fd5b506101b661027f366004612a08565b610e38565b34801561029057600080fd5b506101e461029f366004612a79565b610e45565b3480156102b057600080fd5b506102d87f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161018d565b3480156102fc57600080fd5b506101b661030b366004612a08565b610f02565b34801561031c57600080fd5b5061017c61032b366004612c7e565b610f0f565b34801561033c57600080fd5b506102d87f000000000000000000000000000000000000000000000000000000000000000081565b34801561037057600080fd5b5061017c61037f366004612cf0565b611127565b34801561039057600080fd5b506101e461039f366004612b46565b611160565b3480156103b057600080fd5b506103c46103bf366004612d29565b61118d565b6040805193845260208401929092529082015260600161018d565b3480156103eb57600080fd5b506101b66103fa366004612da5565b61128b565b6103c461040d3660046129aa565b611399565b6101e4610420366004612c17565b6115f8565b60008082428110156104525760405162461bcd60e51b815260040161044990612df0565b60405180910390fd5b610481897f00000000000000000000000000000000000000000000000000000000000000008a8a8a308a610f0f565b9093509150610491898685611947565b604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156104f357600080fd5b505af1158015610507573d6000803e3d6000fd5b505050506105158583611a62565b50965096945050505050565b600061052e848484611b30565b949350505050565b606081428110156105595760405162461bcd60e51b815260040161044990612df0565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168686610590600182612e27565b81811061059f5761059f612e3a565b90506020020160208101906105b49190612e50565b6001600160a01b0316146105da5760405162461bcd60e51b815260040161044990612e74565b6106387f000000000000000000000000000000000000000000000000000000000000000089888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611c0992505050565b915086826001845161064a9190612e27565b8151811061065a5761065a612e3a565b602002602001015110156106805760405162461bcd60e51b815260040161044990612e9a565b6107458686600081811061069657610696612e3a565b90506020020160208101906106ab9190612e50565b336107257f00000000000000000000000000000000000000000000000000000000000000008a8a60008181106106e3576106e3612e3a565b90506020020160208101906106f89190612e50565b8b8b600181811061070b5761070b612e3a565b90506020020160208101906107209190612e50565b611d90565b8560008151811061073857610738612e3a565b6020026020010151611e22565b61078482878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250309250611f52915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d83600185516107c29190612e27565b815181106107d2576107d2612e3a565b60200260200101516040518263ffffffff1660e01b81526004016107f891815260200190565b600060405180830381600087803b15801561081257600080fd5b505af1158015610826573d6000803e3d6000fd5b5050505061085a84836001855161083d9190612e27565b8151811061084d5761084d612e3a565b6020026020010151611a62565b509695505050505050565b60606108927f0000000000000000000000000000000000000000000000000000000000000000848461215a565b90505b92915050565b606081428110156108be5760405162461bcd60e51b815260040161044990612df0565b61091c7f000000000000000000000000000000000000000000000000000000000000000089888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611c0992505050565b915086826001845161092e9190612e27565b8151811061093e5761093e612e3a565b602002602001015110156109645760405162461bcd60e51b815260040161044990612e9a565b61097a8686600081811061069657610696612e3a565b61085a82878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250611f52915050565b606081428110156109dc5760405162461bcd60e51b815260040161044990612df0565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168686610a13600182612e27565b818110610a2257610a22612e3a565b9050602002016020810190610a379190612e50565b6001600160a01b031614610a5d5760405162461bcd60e51b815260040161044990612e74565b610abb7f00000000000000000000000000000000000000000000000000000000000000008988888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061215a92505050565b91508682600081518110610ad157610ad1612e3a565b602002602001015111156106805760405162461bcd60e51b815260040161044990612ed1565b60608142811015610b1a5760405162461bcd60e51b815260040161044990612df0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031686866000818110610b5757610b57612e3a565b9050602002016020810190610b6c9190612e50565b6001600160a01b031614610b925760405162461bcd60e51b815260040161044990612e74565b610bf07f000000000000000000000000000000000000000000000000000000000000000034888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611c0992505050565b9150868260018451610c029190612e27565b81518110610c1257610c12612e3a565b60200260200101511015610c385760405162461bcd60e51b815260040161044990612e9a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db083600081518110610c7a57610c7a612e3a565b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b158015610cad57600080fd5b505af1158015610cc1573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb610d547f000000000000000000000000000000000000000000000000000000000000000089896000818110610d2c57610d2c612e3a565b9050602002016020810190610d419190612e50565b8a8a600181811061070b5761070b612e3a565b84600081518110610d6757610d67612e3a565b60200260200101516040518363ffffffff1660e01b8152600401610da09291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015610dbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de39190612f01565b610def57610def61296c565b610e2e82878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250611f52915050565b5095945050505050565b600061052e8484846122d7565b60608142811015610e685760405162461bcd60e51b815260040161044990612df0565b610ec67f00000000000000000000000000000000000000000000000000000000000000008988888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061215a92505050565b91508682600081518110610edc57610edc612e3a565b602002602001015111156109645760405162461bcd60e51b815260040161044990612ed1565b600061052e8484846123a1565b6000808242811015610f335760405162461bcd60e51b815260040161044990612df0565b6000610f607f00000000000000000000000000000000000000000000000000000000000000008c8c611d90565b6040516323b872dd60e01b81523360048201526001600160a01b03821660248201819052604482018c90529192506323b872dd906064016020604051808303816000875af1158015610fb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fda9190612f01565b5060405163226bf2d160e21b81526001600160a01b03878116600483015260009182918416906389afcb449060240160408051808303816000875af1158015611027573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104b9190612f23565b91509150600061105b8e8e612433565b509050806001600160a01b03168e6001600160a01b03161461107e578183611081565b82825b90975095508a8710156110ce5760405162461bcd60e51b8152602060048201526015602482015274125394d551919250d251539517d057d05353d55395605a1b6044820152606401610449565b898610156111165760405162461bcd60e51b8152602060048201526015602482015274125394d551919250d251539517d097d05353d55395605a1b6044820152606401610449565b505050505097509795505050505050565b6000806111557f0000000000000000000000000000000000000000000000000000000000000000858561251c565b909590945092505050565b60606108927f00000000000000000000000000000000000000000000000000000000000000008484611c09565b600080600083428110156111b35760405162461bcd60e51b815260040161044990612df0565b6111c18c8c8c8c8c8c6125e6565b909450925060006111f37f00000000000000000000000000000000000000000000000000000000000000008e8e611d90565b90506112018d338388611e22565b61120d8c338387611e22565b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a627842906024016020604051808303816000875af1158015611255573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112799190612f47565b92505050985098509895505050505050565b60405163e6a4390560e01b81526001600160a01b038381166004830152828116602483015260009182917f0000000000000000000000000000000000000000000000000000000000000000169063e6a4390590604401602060405180830381865afa1580156112fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113229190612f60565b6040516370a0823160e01b81526001600160a01b038781166004830152919250908216906370a0823190602401602060405180830381865afa15801561136c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113909190612f47565b95945050505050565b600080600083428110156113bf5760405162461bcd60e51b815260040161044990612df0565b6113ed8a7f00000000000000000000000000000000000000000000000000000000000000008b348c8c6125e6565b9094509250600061143f7f00000000000000000000000000000000000000000000000000000000000000008c7f0000000000000000000000000000000000000000000000000000000000000000611d90565b905061144d8b338388611e22565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b1580156114a857600080fd5b505af11580156114bc573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038581166004830152602482018990527f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb925060440190506020604051808303816000875af1158015611531573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115559190612f01565b6115615761156161296c565b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a627842906024016020604051808303816000875af11580156115a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115cd9190612f47565b9250833411156115ea576115ea336115e58634612e27565b611a62565b505096509650969350505050565b6060814281101561161b5760405162461bcd60e51b815260040161044990612df0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168686600081811061165857611658612e3a565b905060200201602081019061166d9190612e50565b6001600160a01b0316146116935760405162461bcd60e51b815260040161044990612e74565b6116f17f00000000000000000000000000000000000000000000000000000000000000008888888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061215a92505050565b9150348260008151811061170757611707612e3a565b6020026020010151111561172d5760405162461bcd60e51b815260040161044990612ed1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db08360008151811061176f5761176f612e3a565b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b1580156117a257600080fd5b505af11580156117b6573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb6118217f000000000000000000000000000000000000000000000000000000000000000089896000818110610d2c57610d2c612e3a565b8460008151811061183457611834612e3a565b60200260200101516040518363ffffffff1660e01b815260040161186d9291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af115801561188c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b09190612f01565b6118bc576118bc61296c565b6118fb82878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250611f52915050565b8160008151811061190e5761190e612e3a565b6020026020010151341115610e2e57610e2e338360008151811061193457611934612e3a565b6020026020010151346115e59190612e27565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916119a39190612fa1565b6000604051808303816000865af19150503d80600081146119e0576040519150601f19603f3d011682016040523d82523d6000602084013e6119e5565b606091505b5091509150818015611a0f575080511580611a0f575080806020019051810190611a0f9190612f01565b611a5b5760405162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c4544006044820152606401610449565b5050505050565b604080516000808252602082019092526001600160a01b038416908390604051611a8c9190612fa1565b60006040518083038185875af1925050503d8060008114611ac9576040519150601f19603f3d011682016040523d82523d6000602084013e611ace565b606091505b5050905080611b2b5760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201526213115160ea1b6064820152608401610449565b505050565b6000808411611b905760405162461bcd60e51b815260206004820152602660248201527f537761704c6962726172793a20494e53554646494349454e545f494e5055545f604482015265105353d5539560d21b6064820152608401610449565b600083118015611ba05750600082115b611bbc5760405162461bcd60e51b815260040161044990612fbd565b6000611bca856103e561285a565b90506000611bd8828561285a565b90506000611bf283611bec886103e861285a565b906128c1565b9050611bfe8183613000565b979650505050505050565b6060600282511015611c595760405162461bcd60e51b81526020600482015260196024820152780a6eec2e098d2c4e4c2e4f27440929cac82989288bea082a89603b1b6044820152606401610449565b815167ffffffffffffffff811115611c7357611c73612b30565b604051908082528060200260200182016040528015611c9c578160200160208202803683370190505b5090508281600081518110611cb357611cb3612e3a565b60200260200101818152505060005b60018351611cd09190612e27565b811015611d8857600080611d2387868581518110611cf057611cf0612e3a565b602002602001015187866001611d069190613022565b81518110611d1657611d16612e3a565b602002602001015161251c565b91509150611d4b848481518110611d3c57611d3c612e3a565b60200260200101518383611b30565b84611d57856001613022565b81518110611d6757611d67612e3a565b60200260200101818152505050508080611d8090613035565b915050611cc2565b509392505050565b6000806000611d9f8585612433565b60405163e6a4390560e01b81526001600160a01b03808416600483015280831660248301529294509092509087169063e6a4390590604401602060405180830381865afa158015611df4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e189190612f60565b9695505050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691611e869190612fa1565b6000604051808303816000865af19150503d8060008114611ec3576040519150601f19603f3d011682016040523d82523d6000602084013e611ec8565b606091505b5091509150818015611ef2575080511580611ef2575080806020019051810190611ef29190612f01565b611f4a5760405162461bcd60e51b8152602060048201526024808201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f46416044820152631253115160e21b6064820152608401610449565b505050505050565b60005b60018351611f639190612e27565b81101561215457600080848381518110611f7f57611f7f612e3a565b602002602001015185846001611f959190613022565b81518110611fa557611fa5612e3a565b6020026020010151915091506000611fbd8383612433565b509050600087611fce866001613022565b81518110611fde57611fde612e3a565b60200260200101519050600080836001600160a01b0316866001600160a01b03161461200c57826000612010565b6000835b91509150600060028a516120249190612e27565b8810612030578861207e565b61207e7f0000000000000000000000000000000000000000000000000000000000000000878c6120618c6002613022565b8151811061207157612071612e3a565b6020026020010151611d90565b90506120ab7f00000000000000000000000000000000000000000000000000000000000000008888611d90565b6001600160a01b031663022c0d9f84848460006040519080825280601f01601f1916602001820160405280156120e8576020820181803683370190505b506040518563ffffffff1660e01b8152600401612108949392919061304e565b600060405180830381600087803b15801561212257600080fd5b505af1158015612136573d6000803e3d6000fd5b5050505050505050505050808061214c90613035565b915050611f55565b50505050565b60606002825110156121aa5760405162461bcd60e51b81526020600482015260196024820152780a6eec2e098d2c4e4c2e4f27440929cac82989288bea082a89603b1b6044820152606401610449565b815167ffffffffffffffff8111156121c4576121c4612b30565b6040519080825280602002602001820160405280156121ed578160200160208202803683370190505b5090508281600183516122009190612e27565b8151811061221057612210612e3a565b60200260200101818152505060006001835161222c9190612e27565b90505b8015611d88576000806122728786612248600187612e27565b8151811061225857612258612e3a565b6020026020010151878681518110611d1657611d16612e3a565b9150915061229a84848151811061228b5761228b612e3a565b602002602001015183836122d7565b846122a6600186612e27565b815181106122b6576122b6612e3a565b602002602001018181525050505080806122cf9061309e565b91505061222f565b60008084116123385760405162461bcd60e51b815260206004820152602760248201527f537761704c6962726172793a20494e53554646494349454e545f4f555450555460448201526617d05353d5539560ca1b6064820152608401610449565b6000831180156123485750600082115b6123645760405162461bcd60e51b815260040161044990612fbd565b600061237c6103e8612376868861285a565b9061285a565b905060006123906103e56123768689612916565b9050611e186001611bec8385613000565b60008084116123f25760405162461bcd60e51b815260206004820181905260248201527f537761704c6962726172793a20494e53554646494349454e545f414d4f554e546044820152606401610449565b6000831180156124025750600082115b61241e5760405162461bcd60e51b815260040161044990612fbd565b82612429858461285a565b61052e9190613000565b600080826001600160a01b0316846001600160a01b0316036124975760405162461bcd60e51b815260206004820181905260248201527f537761704c6962726172793a204944454e544943414c5f4144445245535345536044820152606401610449565b826001600160a01b0316846001600160a01b0316106124b75782846124ba565b83835b90925090506001600160a01b0382166125155760405162461bcd60e51b815260206004820152601960248201527f537761704c6962726172793a205a45524f5f41444452455353000000000000006044820152606401610449565b9250929050565b600080600061252b8585612433565b50905060008061253c888888611d90565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015612579573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259d91906130cc565b506001600160701b031691506001600160701b03169150826001600160a01b0316876001600160a01b0316146125d45780826125d7565b81815b90999098509650505050505050565b60405163e6a4390560e01b81526001600160a01b0387811660048301528681166024830152600091829182917f00000000000000000000000000000000000000000000000000000000000000009091169063e6a4390590604401602060405180830381865afa15801561265d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126819190612f60565b6001600160a01b031603612725576040516364e329cb60e11b81526001600160a01b03898116600483015288811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063c9c65396906044016020604051808303816000875af11580156126ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127239190612f60565b505b6000806127537f00000000000000000000000000000000000000000000000000000000000000008b8b61251c565b91509150816000148015612765575080155b156127755787935086925061284d565b60006127828984846123a1565b90508781116127de57858110156127d35760405162461bcd60e51b8152602060048201526015602482015274125394d551919250d251539517d097d05353d55395605a1b6044820152606401610449565b88945092508261284b565b60006127eb8984866123a1565b9050898111156127fd576127fd61296c565b878110156128455760405162461bcd60e51b8152602060048201526015602482015274125394d551919250d251539517d057d05353d55395605a1b6044820152606401610449565b94508793505b505b5050965096945050505050565b600081158061287e575082826128708183613111565b925061287c9083613000565b145b6108955760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b6044820152606401610449565b6000826128ce8382613022565b91508110156108955760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b6044820152606401610449565b6000826129238382612e27565b91508111156108955760405162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b6044820152606401610449565b634e487b7160e01b600052600160045260246000fd5b6001600160a01b038116811461299757600080fd5b50565b80356129a581612982565b919050565b60008060008060008060c087890312156129c357600080fd5b86356129ce81612982565b955060208701359450604087013593506060870135925060808701356129f381612982565b8092505060a087013590509295509295509295565b600080600060608486031215612a1d57600080fd5b505081359360208301359350604090920135919050565b60008083601f840112612a4657600080fd5b50813567ffffffffffffffff811115612a5e57600080fd5b6020830191508360208260051b850101111561251557600080fd5b60008060008060008060a08789031215612a9257600080fd5b8635955060208701359450604087013567ffffffffffffffff811115612ab757600080fd5b612ac389828a01612a34565b9095509350506060870135612ad781612982565b80925050608087013590509295509295509295565b6020808252825182820181905260009190848201906040850190845b81811015612b2457835183529284019291840191600101612b08565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215612b5957600080fd5b8235915060208084013567ffffffffffffffff80821115612b7957600080fd5b818601915086601f830112612b8d57600080fd5b813581811115612b9f57612b9f612b30565b8060051b604051601f19603f83011681018181108582111715612bc457612bc4612b30565b604052918252848201925083810185019189831115612be257600080fd5b938501935b82851015612c0757612bf88561299a565b84529385019392850192612be7565b8096505050505050509250929050565b600080600080600060808688031215612c2f57600080fd5b85359450602086013567ffffffffffffffff811115612c4d57600080fd5b612c5988828901612a34565b9095509350506040860135612c6d81612982565b949793965091946060013592915050565b600080600080600080600060e0888a031215612c9957600080fd5b8735612ca481612982565b96506020880135612cb481612982565b955060408801359450606088013593506080880135925060a0880135612cd981612982565b8092505060c0880135905092959891949750929550565b60008060408385031215612d0357600080fd5b8235612d0e81612982565b91506020830135612d1e81612982565b809150509250929050565b600080600080600080600080610100898b031215612d4657600080fd5b8835612d5181612982565b97506020890135612d6181612982565b965060408901359550606089013594506080890135935060a0890135925060c0890135612d8d81612982565b8092505060e089013590509295985092959890939650565b600080600060608486031215612dba57600080fd5b8335612dc581612982565b92506020840135612dd581612982565b91506040840135612de581612982565b809150509250925092565b6020808252600790820152661156141254915160ca1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561089557610895612e11565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612e6257600080fd5b8135612e6d81612982565b9392505050565b6020808252600c908201526b0929cac82989288bea082a8960a31b604082015260600190565b6020808252601a908201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604082015260600190565b602080825260169082015275115610d154d4d2559157d25394155517d05353d5539560521b604082015260600190565b600060208284031215612f1357600080fd5b81518015158114612e6d57600080fd5b60008060408385031215612f3657600080fd5b505080516020909101519092909150565b600060208284031215612f5957600080fd5b5051919050565b600060208284031215612f7257600080fd5b8151612e6d81612982565b60005b83811015612f98578181015183820152602001612f80565b50506000910152565b60008251612fb3818460208701612f7d565b9190910192915050565b60208082526023908201527f537761704c6962726172793a20494e53554646494349454e545f4c495155494460408201526249545960e81b606082015260800190565b60008261301d57634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561089557610895612e11565b60006001820161304757613047612e11565b5060010190565b84815283602082015260018060a01b038316604082015260806060820152600082518060808401526130878160a0850160208701612f7d565b601f01601f19169190910160a00195945050505050565b6000816130ad576130ad612e11565b506000190190565b80516001600160701b03811681146129a557600080fd5b6000806000606084860312156130e157600080fd5b6130ea846130b5565b92506130f8602085016130b5565b9150604084015163ffffffff81168114612de557600080fd5b808202811582820484141761089557610895612e1156fea26469706673582212204f5f82b060555a4d8bc92b34d00fdfce4b3f660c2235e6b0027c17c28f2cc7b664736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106101185760003560e01c8063ad5c4648116100a0578063d06ca61f11610064578063d06ca61f14610384578063e8e33700146103a4578063f09a5a9d146103df578063f305d719146103ff578063fb3bdb411461041257600080fd5b8063ad5c4648146102a4578063ad615dec146102f0578063baa2abde14610310578063c45a015514610330578063cbc3ab531461036457600080fd5b806338ed1739116100e757806338ed1739146102115780634a25d94a146102315780637ff36ab51461025157806385f8c259146102645780638803dbee1461028457600080fd5b806302751cec1461015c578063054d50d41461019657806318cbafe5146101c45780631f00ca74146101f157600080fd5b3661015757336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101555761015561296c565b005b600080fd5b34801561016857600080fd5b5061017c6101773660046129aa565b610425565b604080519283526020830191909152015b60405180910390f35b3480156101a257600080fd5b506101b66101b1366004612a08565b610521565b60405190815260200161018d565b3480156101d057600080fd5b506101e46101df366004612a79565b610536565b60405161018d9190612aec565b3480156101fd57600080fd5b506101e461020c366004612b46565b610865565b34801561021d57600080fd5b506101e461022c366004612a79565b61089b565b34801561023d57600080fd5b506101e461024c366004612a79565b6109b9565b6101e461025f366004612c17565b610af7565b34801561027057600080fd5b506101b661027f366004612a08565b610e38565b34801561029057600080fd5b506101e461029f366004612a79565b610e45565b3480156102b057600080fd5b506102d87f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161018d565b3480156102fc57600080fd5b506101b661030b366004612a08565b610f02565b34801561031c57600080fd5b5061017c61032b366004612c7e565b610f0f565b34801561033c57600080fd5b506102d87f000000000000000000000000000000000000000000000000000000000000000081565b34801561037057600080fd5b5061017c61037f366004612cf0565b611127565b34801561039057600080fd5b506101e461039f366004612b46565b611160565b3480156103b057600080fd5b506103c46103bf366004612d29565b61118d565b6040805193845260208401929092529082015260600161018d565b3480156103eb57600080fd5b506101b66103fa366004612da5565b61128b565b6103c461040d3660046129aa565b611399565b6101e4610420366004612c17565b6115f8565b60008082428110156104525760405162461bcd60e51b815260040161044990612df0565b60405180910390fd5b610481897f00000000000000000000000000000000000000000000000000000000000000008a8a8a308a610f0f565b9093509150610491898685611947565b604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156104f357600080fd5b505af1158015610507573d6000803e3d6000fd5b505050506105158583611a62565b50965096945050505050565b600061052e848484611b30565b949350505050565b606081428110156105595760405162461bcd60e51b815260040161044990612df0565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168686610590600182612e27565b81811061059f5761059f612e3a565b90506020020160208101906105b49190612e50565b6001600160a01b0316146105da5760405162461bcd60e51b815260040161044990612e74565b6106387f000000000000000000000000000000000000000000000000000000000000000089888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611c0992505050565b915086826001845161064a9190612e27565b8151811061065a5761065a612e3a565b602002602001015110156106805760405162461bcd60e51b815260040161044990612e9a565b6107458686600081811061069657610696612e3a565b90506020020160208101906106ab9190612e50565b336107257f00000000000000000000000000000000000000000000000000000000000000008a8a60008181106106e3576106e3612e3a565b90506020020160208101906106f89190612e50565b8b8b600181811061070b5761070b612e3a565b90506020020160208101906107209190612e50565b611d90565b8560008151811061073857610738612e3a565b6020026020010151611e22565b61078482878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250309250611f52915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d83600185516107c29190612e27565b815181106107d2576107d2612e3a565b60200260200101516040518263ffffffff1660e01b81526004016107f891815260200190565b600060405180830381600087803b15801561081257600080fd5b505af1158015610826573d6000803e3d6000fd5b5050505061085a84836001855161083d9190612e27565b8151811061084d5761084d612e3a565b6020026020010151611a62565b509695505050505050565b60606108927f0000000000000000000000000000000000000000000000000000000000000000848461215a565b90505b92915050565b606081428110156108be5760405162461bcd60e51b815260040161044990612df0565b61091c7f000000000000000000000000000000000000000000000000000000000000000089888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611c0992505050565b915086826001845161092e9190612e27565b8151811061093e5761093e612e3a565b602002602001015110156109645760405162461bcd60e51b815260040161044990612e9a565b61097a8686600081811061069657610696612e3a565b61085a82878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250611f52915050565b606081428110156109dc5760405162461bcd60e51b815260040161044990612df0565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168686610a13600182612e27565b818110610a2257610a22612e3a565b9050602002016020810190610a379190612e50565b6001600160a01b031614610a5d5760405162461bcd60e51b815260040161044990612e74565b610abb7f00000000000000000000000000000000000000000000000000000000000000008988888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061215a92505050565b91508682600081518110610ad157610ad1612e3a565b602002602001015111156106805760405162461bcd60e51b815260040161044990612ed1565b60608142811015610b1a5760405162461bcd60e51b815260040161044990612df0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031686866000818110610b5757610b57612e3a565b9050602002016020810190610b6c9190612e50565b6001600160a01b031614610b925760405162461bcd60e51b815260040161044990612e74565b610bf07f000000000000000000000000000000000000000000000000000000000000000034888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611c0992505050565b9150868260018451610c029190612e27565b81518110610c1257610c12612e3a565b60200260200101511015610c385760405162461bcd60e51b815260040161044990612e9a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db083600081518110610c7a57610c7a612e3a565b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b158015610cad57600080fd5b505af1158015610cc1573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb610d547f000000000000000000000000000000000000000000000000000000000000000089896000818110610d2c57610d2c612e3a565b9050602002016020810190610d419190612e50565b8a8a600181811061070b5761070b612e3a565b84600081518110610d6757610d67612e3a565b60200260200101516040518363ffffffff1660e01b8152600401610da09291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015610dbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de39190612f01565b610def57610def61296c565b610e2e82878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250611f52915050565b5095945050505050565b600061052e8484846122d7565b60608142811015610e685760405162461bcd60e51b815260040161044990612df0565b610ec67f00000000000000000000000000000000000000000000000000000000000000008988888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061215a92505050565b91508682600081518110610edc57610edc612e3a565b602002602001015111156109645760405162461bcd60e51b815260040161044990612ed1565b600061052e8484846123a1565b6000808242811015610f335760405162461bcd60e51b815260040161044990612df0565b6000610f607f00000000000000000000000000000000000000000000000000000000000000008c8c611d90565b6040516323b872dd60e01b81523360048201526001600160a01b03821660248201819052604482018c90529192506323b872dd906064016020604051808303816000875af1158015610fb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fda9190612f01565b5060405163226bf2d160e21b81526001600160a01b03878116600483015260009182918416906389afcb449060240160408051808303816000875af1158015611027573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104b9190612f23565b91509150600061105b8e8e612433565b509050806001600160a01b03168e6001600160a01b03161461107e578183611081565b82825b90975095508a8710156110ce5760405162461bcd60e51b8152602060048201526015602482015274125394d551919250d251539517d057d05353d55395605a1b6044820152606401610449565b898610156111165760405162461bcd60e51b8152602060048201526015602482015274125394d551919250d251539517d097d05353d55395605a1b6044820152606401610449565b505050505097509795505050505050565b6000806111557f0000000000000000000000000000000000000000000000000000000000000000858561251c565b909590945092505050565b60606108927f00000000000000000000000000000000000000000000000000000000000000008484611c09565b600080600083428110156111b35760405162461bcd60e51b815260040161044990612df0565b6111c18c8c8c8c8c8c6125e6565b909450925060006111f37f00000000000000000000000000000000000000000000000000000000000000008e8e611d90565b90506112018d338388611e22565b61120d8c338387611e22565b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a627842906024016020604051808303816000875af1158015611255573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112799190612f47565b92505050985098509895505050505050565b60405163e6a4390560e01b81526001600160a01b038381166004830152828116602483015260009182917f0000000000000000000000000000000000000000000000000000000000000000169063e6a4390590604401602060405180830381865afa1580156112fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113229190612f60565b6040516370a0823160e01b81526001600160a01b038781166004830152919250908216906370a0823190602401602060405180830381865afa15801561136c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113909190612f47565b95945050505050565b600080600083428110156113bf5760405162461bcd60e51b815260040161044990612df0565b6113ed8a7f00000000000000000000000000000000000000000000000000000000000000008b348c8c6125e6565b9094509250600061143f7f00000000000000000000000000000000000000000000000000000000000000008c7f0000000000000000000000000000000000000000000000000000000000000000611d90565b905061144d8b338388611e22565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b1580156114a857600080fd5b505af11580156114bc573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038581166004830152602482018990527f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb925060440190506020604051808303816000875af1158015611531573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115559190612f01565b6115615761156161296c565b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a627842906024016020604051808303816000875af11580156115a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115cd9190612f47565b9250833411156115ea576115ea336115e58634612e27565b611a62565b505096509650969350505050565b6060814281101561161b5760405162461bcd60e51b815260040161044990612df0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168686600081811061165857611658612e3a565b905060200201602081019061166d9190612e50565b6001600160a01b0316146116935760405162461bcd60e51b815260040161044990612e74565b6116f17f00000000000000000000000000000000000000000000000000000000000000008888888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061215a92505050565b9150348260008151811061170757611707612e3a565b6020026020010151111561172d5760405162461bcd60e51b815260040161044990612ed1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db08360008151811061176f5761176f612e3a565b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b1580156117a257600080fd5b505af11580156117b6573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb6118217f000000000000000000000000000000000000000000000000000000000000000089896000818110610d2c57610d2c612e3a565b8460008151811061183457611834612e3a565b60200260200101516040518363ffffffff1660e01b815260040161186d9291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af115801561188c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b09190612f01565b6118bc576118bc61296c565b6118fb82878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250611f52915050565b8160008151811061190e5761190e612e3a565b6020026020010151341115610e2e57610e2e338360008151811061193457611934612e3a565b6020026020010151346115e59190612e27565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916119a39190612fa1565b6000604051808303816000865af19150503d80600081146119e0576040519150601f19603f3d011682016040523d82523d6000602084013e6119e5565b606091505b5091509150818015611a0f575080511580611a0f575080806020019051810190611a0f9190612f01565b611a5b5760405162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c4544006044820152606401610449565b5050505050565b604080516000808252602082019092526001600160a01b038416908390604051611a8c9190612fa1565b60006040518083038185875af1925050503d8060008114611ac9576040519150601f19603f3d011682016040523d82523d6000602084013e611ace565b606091505b5050905080611b2b5760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201526213115160ea1b6064820152608401610449565b505050565b6000808411611b905760405162461bcd60e51b815260206004820152602660248201527f537761704c6962726172793a20494e53554646494349454e545f494e5055545f604482015265105353d5539560d21b6064820152608401610449565b600083118015611ba05750600082115b611bbc5760405162461bcd60e51b815260040161044990612fbd565b6000611bca856103e561285a565b90506000611bd8828561285a565b90506000611bf283611bec886103e861285a565b906128c1565b9050611bfe8183613000565b979650505050505050565b6060600282511015611c595760405162461bcd60e51b81526020600482015260196024820152780a6eec2e098d2c4e4c2e4f27440929cac82989288bea082a89603b1b6044820152606401610449565b815167ffffffffffffffff811115611c7357611c73612b30565b604051908082528060200260200182016040528015611c9c578160200160208202803683370190505b5090508281600081518110611cb357611cb3612e3a565b60200260200101818152505060005b60018351611cd09190612e27565b811015611d8857600080611d2387868581518110611cf057611cf0612e3a565b602002602001015187866001611d069190613022565b81518110611d1657611d16612e3a565b602002602001015161251c565b91509150611d4b848481518110611d3c57611d3c612e3a565b60200260200101518383611b30565b84611d57856001613022565b81518110611d6757611d67612e3a565b60200260200101818152505050508080611d8090613035565b915050611cc2565b509392505050565b6000806000611d9f8585612433565b60405163e6a4390560e01b81526001600160a01b03808416600483015280831660248301529294509092509087169063e6a4390590604401602060405180830381865afa158015611df4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e189190612f60565b9695505050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691611e869190612fa1565b6000604051808303816000865af19150503d8060008114611ec3576040519150601f19603f3d011682016040523d82523d6000602084013e611ec8565b606091505b5091509150818015611ef2575080511580611ef2575080806020019051810190611ef29190612f01565b611f4a5760405162461bcd60e51b8152602060048201526024808201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f46416044820152631253115160e21b6064820152608401610449565b505050505050565b60005b60018351611f639190612e27565b81101561215457600080848381518110611f7f57611f7f612e3a565b602002602001015185846001611f959190613022565b81518110611fa557611fa5612e3a565b6020026020010151915091506000611fbd8383612433565b509050600087611fce866001613022565b81518110611fde57611fde612e3a565b60200260200101519050600080836001600160a01b0316866001600160a01b03161461200c57826000612010565b6000835b91509150600060028a516120249190612e27565b8810612030578861207e565b61207e7f0000000000000000000000000000000000000000000000000000000000000000878c6120618c6002613022565b8151811061207157612071612e3a565b6020026020010151611d90565b90506120ab7f00000000000000000000000000000000000000000000000000000000000000008888611d90565b6001600160a01b031663022c0d9f84848460006040519080825280601f01601f1916602001820160405280156120e8576020820181803683370190505b506040518563ffffffff1660e01b8152600401612108949392919061304e565b600060405180830381600087803b15801561212257600080fd5b505af1158015612136573d6000803e3d6000fd5b5050505050505050505050808061214c90613035565b915050611f55565b50505050565b60606002825110156121aa5760405162461bcd60e51b81526020600482015260196024820152780a6eec2e098d2c4e4c2e4f27440929cac82989288bea082a89603b1b6044820152606401610449565b815167ffffffffffffffff8111156121c4576121c4612b30565b6040519080825280602002602001820160405280156121ed578160200160208202803683370190505b5090508281600183516122009190612e27565b8151811061221057612210612e3a565b60200260200101818152505060006001835161222c9190612e27565b90505b8015611d88576000806122728786612248600187612e27565b8151811061225857612258612e3a565b6020026020010151878681518110611d1657611d16612e3a565b9150915061229a84848151811061228b5761228b612e3a565b602002602001015183836122d7565b846122a6600186612e27565b815181106122b6576122b6612e3a565b602002602001018181525050505080806122cf9061309e565b91505061222f565b60008084116123385760405162461bcd60e51b815260206004820152602760248201527f537761704c6962726172793a20494e53554646494349454e545f4f555450555460448201526617d05353d5539560ca1b6064820152608401610449565b6000831180156123485750600082115b6123645760405162461bcd60e51b815260040161044990612fbd565b600061237c6103e8612376868861285a565b9061285a565b905060006123906103e56123768689612916565b9050611e186001611bec8385613000565b60008084116123f25760405162461bcd60e51b815260206004820181905260248201527f537761704c6962726172793a20494e53554646494349454e545f414d4f554e546044820152606401610449565b6000831180156124025750600082115b61241e5760405162461bcd60e51b815260040161044990612fbd565b82612429858461285a565b61052e9190613000565b600080826001600160a01b0316846001600160a01b0316036124975760405162461bcd60e51b815260206004820181905260248201527f537761704c6962726172793a204944454e544943414c5f4144445245535345536044820152606401610449565b826001600160a01b0316846001600160a01b0316106124b75782846124ba565b83835b90925090506001600160a01b0382166125155760405162461bcd60e51b815260206004820152601960248201527f537761704c6962726172793a205a45524f5f41444452455353000000000000006044820152606401610449565b9250929050565b600080600061252b8585612433565b50905060008061253c888888611d90565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015612579573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259d91906130cc565b506001600160701b031691506001600160701b03169150826001600160a01b0316876001600160a01b0316146125d45780826125d7565b81815b90999098509650505050505050565b60405163e6a4390560e01b81526001600160a01b0387811660048301528681166024830152600091829182917f00000000000000000000000000000000000000000000000000000000000000009091169063e6a4390590604401602060405180830381865afa15801561265d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126819190612f60565b6001600160a01b031603612725576040516364e329cb60e11b81526001600160a01b03898116600483015288811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063c9c65396906044016020604051808303816000875af11580156126ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127239190612f60565b505b6000806127537f00000000000000000000000000000000000000000000000000000000000000008b8b61251c565b91509150816000148015612765575080155b156127755787935086925061284d565b60006127828984846123a1565b90508781116127de57858110156127d35760405162461bcd60e51b8152602060048201526015602482015274125394d551919250d251539517d097d05353d55395605a1b6044820152606401610449565b88945092508261284b565b60006127eb8984866123a1565b9050898111156127fd576127fd61296c565b878110156128455760405162461bcd60e51b8152602060048201526015602482015274125394d551919250d251539517d057d05353d55395605a1b6044820152606401610449565b94508793505b505b5050965096945050505050565b600081158061287e575082826128708183613111565b925061287c9083613000565b145b6108955760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b6044820152606401610449565b6000826128ce8382613022565b91508110156108955760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b6044820152606401610449565b6000826129238382612e27565b91508111156108955760405162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b6044820152606401610449565b634e487b7160e01b600052600160045260246000fd5b6001600160a01b038116811461299757600080fd5b50565b80356129a581612982565b919050565b60008060008060008060c087890312156129c357600080fd5b86356129ce81612982565b955060208701359450604087013593506060870135925060808701356129f381612982565b8092505060a087013590509295509295509295565b600080600060608486031215612a1d57600080fd5b505081359360208301359350604090920135919050565b60008083601f840112612a4657600080fd5b50813567ffffffffffffffff811115612a5e57600080fd5b6020830191508360208260051b850101111561251557600080fd5b60008060008060008060a08789031215612a9257600080fd5b8635955060208701359450604087013567ffffffffffffffff811115612ab757600080fd5b612ac389828a01612a34565b9095509350506060870135612ad781612982565b80925050608087013590509295509295509295565b6020808252825182820181905260009190848201906040850190845b81811015612b2457835183529284019291840191600101612b08565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215612b5957600080fd5b8235915060208084013567ffffffffffffffff80821115612b7957600080fd5b818601915086601f830112612b8d57600080fd5b813581811115612b9f57612b9f612b30565b8060051b604051601f19603f83011681018181108582111715612bc457612bc4612b30565b604052918252848201925083810185019189831115612be257600080fd5b938501935b82851015612c0757612bf88561299a565b84529385019392850192612be7565b8096505050505050509250929050565b600080600080600060808688031215612c2f57600080fd5b85359450602086013567ffffffffffffffff811115612c4d57600080fd5b612c5988828901612a34565b9095509350506040860135612c6d81612982565b949793965091946060013592915050565b600080600080600080600060e0888a031215612c9957600080fd5b8735612ca481612982565b96506020880135612cb481612982565b955060408801359450606088013593506080880135925060a0880135612cd981612982565b8092505060c0880135905092959891949750929550565b60008060408385031215612d0357600080fd5b8235612d0e81612982565b91506020830135612d1e81612982565b809150509250929050565b600080600080600080600080610100898b031215612d4657600080fd5b8835612d5181612982565b97506020890135612d6181612982565b965060408901359550606089013594506080890135935060a0890135925060c0890135612d8d81612982565b8092505060e089013590509295985092959890939650565b600080600060608486031215612dba57600080fd5b8335612dc581612982565b92506020840135612dd581612982565b91506040840135612de581612982565b809150509250925092565b6020808252600790820152661156141254915160ca1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561089557610895612e11565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612e6257600080fd5b8135612e6d81612982565b9392505050565b6020808252600c908201526b0929cac82989288bea082a8960a31b604082015260600190565b6020808252601a908201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604082015260600190565b602080825260169082015275115610d154d4d2559157d25394155517d05353d5539560521b604082015260600190565b600060208284031215612f1357600080fd5b81518015158114612e6d57600080fd5b60008060408385031215612f3657600080fd5b505080516020909101519092909150565b600060208284031215612f5957600080fd5b5051919050565b600060208284031215612f7257600080fd5b8151612e6d81612982565b60005b83811015612f98578181015183820152602001612f80565b50506000910152565b60008251612fb3818460208701612f7d565b9190910192915050565b60208082526023908201527f537761704c6962726172793a20494e53554646494349454e545f4c495155494460408201526249545960e81b606082015260800190565b60008261301d57634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561089557610895612e11565b60006001820161304757613047612e11565b5060010190565b84815283602082015260018060a01b038316604082015260806060820152600082518060808401526130878160a0850160208701612f7d565b601f01601f19169190910160a00195945050505050565b6000816130ad576130ad612e11565b506000190190565b80516001600160701b03811681146129a557600080fd5b6000806000606084860312156130e157600080fd5b6130ea846130b5565b92506130f8602085016130b5565b9150604084015163ffffffff81168114612de557600080fd5b808202811582820484141761089557610895612e1156fea26469706673582212204f5f82b060555a4d8bc92b34d00fdfce4b3f660c2235e6b0027c17c28f2cc7b664736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}