{
  "address": "0x0DCd1Bf9A1b36cE34237eEaFef220932846BCD82",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimalFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fixedAPY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getStakedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "rewardEarned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRateSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "stakeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "staked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x363bfbd15a749efbe706d5f7f7106ad58a0b13dca1e7fbb71be3bda3355021a0",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x0DCd1Bf9A1b36cE34237eEaFef220932846BCD82",
    "transactionIndex": 0,
    "gasUsed": "591682",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x5edb03a8d098adf9289dc6657d3b9815bf238424f12494c870dcdc56494e9919",
    "transactionHash": "0x363bfbd15a749efbe706d5f7f7106ad58a0b13dca1e7fbb71be3bda3355021a0",
    "logs": [],
    "blockNumber": 14,
    "cumulativeGasUsed": "591682",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "0x0165878A594ca255338adfa4d48449f69242Eb8F"
  ],
  "numDeployments": 1,
  "solcInputHash": "362aa40f9de805c30228e09256b409df",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimalFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fixedAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"rewardEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRateSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"stakeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"rewardEarned(address)\":{\"details\":\"- to calculate the earned rewards for a user based on the amount of tokens staked\",\"params\":{\"_account\":\"- the address of the user\"},\"returns\":{\"_0\":\"uint256 - the amount of rewards earned\"}},\"rewardPerToken()\":{\"details\":\"- To calculuate the amount of rewards per token staked\",\"returns\":{\"_0\":\"uint256 - The amount of rewards per token staked\"}},\"stakeToken(uint256,address)\":{\"details\":\"- to stake tokens into the pool\",\"params\":{\"_amount\":\"- the amount of tokens to stake\"}},\"withdrawToken(uint256,address)\":{\"details\":\"- to withdraw tokens from the pool\",\"params\":{\"_amount\":\"- the amount of tokens to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/StakingPool.sol\":\"StakingPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/StakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\ncontract StakingPool {\\n    IERC20 public rewardToken;\\n    IERC20 public stakingToken;\\n    uint256 private _totalSupply;\\n    uint256 public rewardRate;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n    uint256 public decimalFactor;\\n    uint256 public constant fixedAPY = 12;\\n    bool public rewardRateSet = false;\\n\\n    mapping(address => uint256) public rewards;\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public staked;\\n\\n    /// @dev - modifier that will calculate the amount of rewards earned and add it to the rewards mapping\\n    modifier updateReward(address _account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = block.timestamp;\\n        rewards[_account] = rewardEarned(_account);\\n        userRewardPerTokenPaid[_account] = rewardPerTokenStored;\\n        _;\\n    }\\n\\n    constructor(address _stakingToken, address _rewardToken) {\\n        stakingToken = IERC20(_stakingToken);\\n        rewardToken = IERC20(_rewardToken);\\n\\n        uint256 rewardTokenDecimals = rewardToken.decimals();\\n        decimalFactor = 10 ** rewardTokenDecimals;\\n    }\\n\\n    /// @dev - to stake tokens into the pool\\n    /// @param _amount - the amount of tokens to stake\\n    function stakeToken(\\n        uint256 _amount,\\n        address _user\\n    ) external updateReward(_user) {\\n        require(_amount > 0, \\\"Cannot stake 0 tokens\\\");\\n        _totalSupply += _amount;\\n        staked[_user] += _amount;\\n\\n        if (!rewardRateSet) {\\n            _setRewardRate();\\n        }\\n    }\\n\\n    /// @dev - to withdraw tokens from the pool\\n    /// @param _amount - the amount of tokens to withdraw\\n    function withdrawToken(\\n        uint256 _amount,\\n        address _user\\n    ) external updateReward(_user) {\\n        require(_amount > 0, \\\"Cannot withdraw 0 tokens\\\");\\n        _totalSupply -= _amount;\\n        staked[_user] -= _amount;\\n    }\\n\\n    /// @dev - To calculuate the amount of rewards per token staked\\n    /// @return uint256 - The amount of rewards per token staked\\n    function rewardPerToken() public view returns (uint256) {\\n        if (_totalSupply == 0) {\\n            return rewardPerTokenStored;\\n        }\\n\\n        return\\n            rewardPerTokenStored +\\n            (((block.timestamp - lastUpdateTime) * rewardRate * decimalFactor) /\\n                _totalSupply);\\n    }\\n\\n    function getStakedAmount(address _user) public view returns (uint256) {\\n        return staked[_user];\\n    }\\n\\n    /**\\n     * @dev - to calculate the earned rewards for a user based on the amount of tokens staked\\n     * @param _account - the address of the user\\n     * @return uint256 - the amount of rewards earned\\n     */\\n\\n    function rewardEarned(address _account) public view returns (uint256) {\\n        return\\n            ((staked[_account] *\\n                (rewardPerToken() - userRewardPerTokenPaid[_account])) /\\n                decimalFactor) + rewards[_account];\\n    }\\n\\n    function claimReward(address _user) external updateReward(msg.sender) {\\n        uint256 reward = rewards[_user];\\n        if (reward > 0) {\\n            rewards[_user] = 0;\\n            rewardToken.transfer(_user, reward);\\n        }\\n    }\\n\\n    function _setRewardRate() internal {\\n        require(!rewardRateSet, \\\"Reward rate already set\\\");\\n        rewardRate =\\n            (stakingToken.balanceOf(address(this)) * fixedAPY) /\\n            (365 * 100);\\n        rewardRateSet = true;\\n    }\\n}\\n\",\"keccak256\":\"0x06cb9c74eb1ead501f694f46f610f61b3d978e520a3cd3af82d724ab9fbd4225\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\ninterface IERC20 {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function decimals() external view returns (uint256);\\n\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    function allowance(\\n        address _owner,\\n        address _spender\\n    ) external view returns (uint256);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x239f47b2f966a01ac0f60503dec17b3d50e7bd5aaaea4f3fe8c79909d9da3f90\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x60806040526007805460ff191690553480156200001b57600080fd5b5060405162000ad538038062000ad58339810160408190526200003e916200010a565b600180546001600160a01b038085166001600160a01b0319928316179092556000805492841692909116821781556040805163313ce56760e01b8152905191929163313ce567916004808201926020929091908290030181865afa158015620000ab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000d1919062000142565b9050620000e081600a62000271565b6006555062000286915050565b80516001600160a01b03811681146200010557600080fd5b919050565b600080604083850312156200011e57600080fd5b6200012983620000ed565b91506200013960208401620000ed565b90509250929050565b6000602082840312156200015557600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115620001b35781600019048211156200019757620001976200015c565b80851615620001a557918102915b93841c939080029062000177565b509250929050565b600082620001cc575060016200026b565b81620001db575060006200026b565b8160018114620001f45760028114620001ff576200021f565b60019150506200026b565b60ff8411156200021357620002136200015c565b50506001821b6200026b565b5060208310610133831016604e8410600b841016171562000244575081810a6200026b565b62000250838362000172565b80600019048211156200026757620002676200015c565b0290505b92915050565b60006200027f8383620001bb565b9392505050565b61083f80620002966000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806398807d84116100a2578063cd3daf9d11610071578063cd3daf9d14610235578063d279c1911461023d578063df136d6514610250578063efb48f7c14610259578063f7c618c11461027657600080fd5b806398807d84146101e45780639ee3060014610204578063be4b177214610219578063c8f33c911461022c57600080fd5b80636d6a6a4d116100de5780636d6a6a4d1461018757806372f702f3146101905780637b0a47ee146101bb5780638b876347146101c457600080fd5b80630700037d1461011057806316ba6bf31461014357806348c9eaaf146101565780634da6a5561461015e575b600080fd5b61013061011e36600461070b565b60086020526000908152604090205481565b6040519081526020015b60405180910390f35b61013061015136600461070b565b610289565b610130600c81565b61013061016c36600461070b565b6001600160a01b03166000908152600a602052604090205490565b61013060065481565b6001546101a3906001600160a01b031681565b6040516001600160a01b03909116815260200161013a565b61013060035481565b6101306101d236600461070b565b60096020526000908152604090205481565b6101306101f236600461070b565b600a6020526000908152604090205481565b61021761021236600461072d565b610303565b005b61021761022736600461072d565b6103ec565b61013060045481565b6101306104c6565b61021761024b36600461070b565b61051f565b61013060055481565b6007546102669060ff1681565b604051901515815260200161013a565b6000546101a3906001600160a01b031681565b6001600160a01b0381166000908152600860209081526040808320546006546009909352908320549091906102bc6104c6565b6102c6919061076f565b6001600160a01b0385166000908152600a60205260409020546102e99190610782565b6102f39190610799565b6102fd91906107bb565b92915050565b8061030c6104c6565b6005554260045561031c81610289565b6001600160a01b038216600090815260086020908152604080832093909355600554600990915291902055826103915760405162461bcd60e51b815260206004820152601560248201527443616e6e6f74207374616b65203020746f6b656e7360581b60448201526064015b60405180910390fd5b82600260008282546103a391906107bb565b90915550506001600160a01b0382166000908152600a6020526040812080548592906103d09084906107bb565b909155505060075460ff166103e7576103e7610603565b505050565b806103f56104c6565b6005554260045561040581610289565b6001600160a01b0382166000908152600860209081526040808320939093556005546009909152919020558261047d5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f74207769746864726177203020746f6b656e7300000000000000006044820152606401610388565b826002600082825461048f919061076f565b90915550506001600160a01b0382166000908152600a6020526040812080548592906104bc90849061076f565b9091555050505050565b60006002546000036104d9575060055490565b6002546006546003546004546104ef904261076f565b6104f99190610782565b6105039190610782565b61050d9190610799565b60055461051a91906107bb565b905090565b336105286104c6565b6005554260045561053881610289565b6001600160a01b0380831660009081526008602081815260408084209590955560055460098252858420559286168252909152205480156103e7576001600160a01b038381166000818152600860205260408082208290559054905163a9059cbb60e01b81526004810192909252602482018490529091169063a9059cbb906044016020604051808303816000875af11580156105d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fd91906107ce565b50505050565b60075460ff16156106565760405162461bcd60e51b815260206004820152601760248201527f526577617264207261746520616c7265616479207365740000000000000000006044820152606401610388565b6001546040516370a0823160e01b8152306004820152618e9491600c916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156106a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c991906107f0565b6106d39190610782565b6106dd9190610799565b6003556007805460ff19166001179055565b80356001600160a01b038116811461070657600080fd5b919050565b60006020828403121561071d57600080fd5b610726826106ef565b9392505050565b6000806040838503121561074057600080fd5b82359150610750602084016106ef565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b818103818111156102fd576102fd610759565b80820281158282048414176102fd576102fd610759565b6000826107b657634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156102fd576102fd610759565b6000602082840312156107e057600080fd5b8151801515811461072657600080fd5b60006020828403121561080257600080fd5b505191905056fea2646970667358221220ffde94afd0eea0e3bc8333fa6a9d3baea06e1435902090a883316ec88c2c413864736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c806398807d84116100a2578063cd3daf9d11610071578063cd3daf9d14610235578063d279c1911461023d578063df136d6514610250578063efb48f7c14610259578063f7c618c11461027657600080fd5b806398807d84146101e45780639ee3060014610204578063be4b177214610219578063c8f33c911461022c57600080fd5b80636d6a6a4d116100de5780636d6a6a4d1461018757806372f702f3146101905780637b0a47ee146101bb5780638b876347146101c457600080fd5b80630700037d1461011057806316ba6bf31461014357806348c9eaaf146101565780634da6a5561461015e575b600080fd5b61013061011e36600461070b565b60086020526000908152604090205481565b6040519081526020015b60405180910390f35b61013061015136600461070b565b610289565b610130600c81565b61013061016c36600461070b565b6001600160a01b03166000908152600a602052604090205490565b61013060065481565b6001546101a3906001600160a01b031681565b6040516001600160a01b03909116815260200161013a565b61013060035481565b6101306101d236600461070b565b60096020526000908152604090205481565b6101306101f236600461070b565b600a6020526000908152604090205481565b61021761021236600461072d565b610303565b005b61021761022736600461072d565b6103ec565b61013060045481565b6101306104c6565b61021761024b36600461070b565b61051f565b61013060055481565b6007546102669060ff1681565b604051901515815260200161013a565b6000546101a3906001600160a01b031681565b6001600160a01b0381166000908152600860209081526040808320546006546009909352908320549091906102bc6104c6565b6102c6919061076f565b6001600160a01b0385166000908152600a60205260409020546102e99190610782565b6102f39190610799565b6102fd91906107bb565b92915050565b8061030c6104c6565b6005554260045561031c81610289565b6001600160a01b038216600090815260086020908152604080832093909355600554600990915291902055826103915760405162461bcd60e51b815260206004820152601560248201527443616e6e6f74207374616b65203020746f6b656e7360581b60448201526064015b60405180910390fd5b82600260008282546103a391906107bb565b90915550506001600160a01b0382166000908152600a6020526040812080548592906103d09084906107bb565b909155505060075460ff166103e7576103e7610603565b505050565b806103f56104c6565b6005554260045561040581610289565b6001600160a01b0382166000908152600860209081526040808320939093556005546009909152919020558261047d5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f74207769746864726177203020746f6b656e7300000000000000006044820152606401610388565b826002600082825461048f919061076f565b90915550506001600160a01b0382166000908152600a6020526040812080548592906104bc90849061076f565b9091555050505050565b60006002546000036104d9575060055490565b6002546006546003546004546104ef904261076f565b6104f99190610782565b6105039190610782565b61050d9190610799565b60055461051a91906107bb565b905090565b336105286104c6565b6005554260045561053881610289565b6001600160a01b0380831660009081526008602081815260408084209590955560055460098252858420559286168252909152205480156103e7576001600160a01b038381166000818152600860205260408082208290559054905163a9059cbb60e01b81526004810192909252602482018490529091169063a9059cbb906044016020604051808303816000875af11580156105d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fd91906107ce565b50505050565b60075460ff16156106565760405162461bcd60e51b815260206004820152601760248201527f526577617264207261746520616c7265616479207365740000000000000000006044820152606401610388565b6001546040516370a0823160e01b8152306004820152618e9491600c916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156106a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c991906107f0565b6106d39190610782565b6106dd9190610799565b6003556007805460ff19166001179055565b80356001600160a01b038116811461070657600080fd5b919050565b60006020828403121561071d57600080fd5b610726826106ef565b9392505050565b6000806040838503121561074057600080fd5b82359150610750602084016106ef565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b818103818111156102fd576102fd610759565b80820281158282048414176102fd576102fd610759565b6000826107b657634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156102fd576102fd610759565b6000602082840312156107e057600080fd5b8151801515811461072657600080fd5b60006020828403121561080257600080fd5b505191905056fea2646970667358221220ffde94afd0eea0e3bc8333fa6a9d3baea06e1435902090a883316ec88c2c413864736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "rewardEarned(address)": {
        "details": "- to calculate the earned rewards for a user based on the amount of tokens staked",
        "params": {
          "_account": "- the address of the user"
        },
        "returns": {
          "_0": "uint256 - the amount of rewards earned"
        }
      },
      "rewardPerToken()": {
        "details": "- To calculuate the amount of rewards per token staked",
        "returns": {
          "_0": "uint256 - The amount of rewards per token staked"
        }
      },
      "stakeToken(uint256,address)": {
        "details": "- to stake tokens into the pool",
        "params": {
          "_amount": "- the amount of tokens to stake"
        }
      },
      "withdrawToken(uint256,address)": {
        "details": "- to withdraw tokens from the pool",
        "params": {
          "_amount": "- the amount of tokens to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1759,
        "contract": "contracts/core/StakingPool.sol:StakingPool",
        "label": "rewardToken",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)4442"
      },
      {
        "astId": 1762,
        "contract": "contracts/core/StakingPool.sol:StakingPool",
        "label": "stakingToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)4442"
      },
      {
        "astId": 1764,
        "contract": "contracts/core/StakingPool.sol:StakingPool",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1766,
        "contract": "contracts/core/StakingPool.sol:StakingPool",
        "label": "rewardRate",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1768,
        "contract": "contracts/core/StakingPool.sol:StakingPool",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1770,
        "contract": "contracts/core/StakingPool.sol:StakingPool",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1772,
        "contract": "contracts/core/StakingPool.sol:StakingPool",
        "label": "decimalFactor",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1778,
        "contract": "contracts/core/StakingPool.sol:StakingPool",
        "label": "rewardRateSet",
        "offset": 0,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 1782,
        "contract": "contracts/core/StakingPool.sol:StakingPool",
        "label": "rewards",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1786,
        "contract": "contracts/core/StakingPool.sol:StakingPool",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1790,
        "contract": "contracts/core/StakingPool.sol:StakingPool",
        "label": "staked",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)4442": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}