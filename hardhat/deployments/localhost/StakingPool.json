{
  "address": "0x0DCd1Bf9A1b36cE34237eEaFef220932846BCD82",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getStakedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "rewardEarned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRateSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "stakeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "staked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdfff998a6e9cb2fbd6163ce9b851011577d71f9f4827b5bb59f471d83fbf2724",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x0DCd1Bf9A1b36cE34237eEaFef220932846BCD82",
    "transactionIndex": 0,
    "gasUsed": "512531",
    "logsBloom": "0x
    "blockHash": "0x050309fdee5aa74b58fea82e1d54f40ea82ec44af74420a55f108391834f4747",
    "transactionHash": "0xdfff998a6e9cb2fbd6163ce9b851011577d71f9f4827b5bb59f471d83fbf2724",
    "logs": [],
    "blockNumber": 14,
    "cumulativeGasUsed": "512531",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "0x0165878A594ca255338adfa4d48449f69242Eb8F"
  ],
  "numDeployments": 1,
  "solcInputHash": "03ba2e4562075109f8cb13291a20b670",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"rewardEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRateSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"stakeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"rewardEarned(address)\":{\"details\":\"- to calculate the earned rewards for a user based on the amount of tokens staked\",\"params\":{\"_account\":\"- the address of the user\"},\"returns\":{\"_0\":\"uint256 - the amount of rewards earned\"}},\"rewardPerToken()\":{\"details\":\"- To calculuate the amount of rewards per token staked\",\"returns\":{\"_0\":\"uint256 - The amount of rewards per token staked\"}},\"stakeToken(uint256,address)\":{\"details\":\"- to stake tokens into the pool\",\"params\":{\"_amount\":\"- the amount of tokens to stake\"}},\"withdrawToken(uint256,address)\":{\"details\":\"- to withdraw tokens from the pool\",\"params\":{\"_amount\":\"- the amount of tokens to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/StakingPool.sol\":\"StakingPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/StakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\ncontract StakingPool {\\n    IERC20 public rewardToken;\\n    IERC20 public stakingToken;\\n    uint256 private _totalSupply;\\n    uint256 public rewardRate = 100;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n    bool public rewardRateSet = false;\\n\\n    mapping(address => uint256) public rewards;\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public staked;\\n\\n    /// @dev - modifier that will calculate the amount of rewards earned and add it to the rewards mapping\\n    modifier updateReward(address _account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = block.timestamp;\\n        rewards[_account] = rewardEarned(_account);\\n        userRewardPerTokenPaid[_account] = rewardPerTokenStored;\\n        _;\\n    }\\n\\n    constructor(address _stakingToken, address _rewardToken) {\\n        stakingToken = IERC20(_stakingToken);\\n        rewardToken = IERC20(_rewardToken);\\n    }\\n\\n    /// @dev - to stake tokens into the pool\\n    /// @param _amount - the amount of tokens to stake\\n    function stakeToken(\\n        uint256 _amount,\\n        address _user\\n    ) external updateReward(_user) {\\n        require(_amount > 0, \\\"Cannot stake 0 tokens\\\");\\n        _totalSupply += _amount;\\n        staked[_user] += _amount;\\n    }\\n\\n    /// @dev - to withdraw tokens from the pool\\n    /// @param _amount - the amount of tokens to withdraw\\n    function withdrawToken(\\n        uint256 _amount,\\n        address _user\\n    ) external updateReward(_user) {\\n        require(_amount > 0, \\\"Cannot withdraw 0 tokens\\\");\\n        _totalSupply -= _amount;\\n        staked[_user] -= _amount;\\n    }\\n\\n    /// @dev - To calculuate the amount of rewards per token staked\\n    /// @return uint256 - The amount of rewards per token staked\\n    function rewardPerToken() public view returns (uint256) {\\n        if (_totalSupply == 0) {\\n            return rewardPerTokenStored;\\n        }\\n\\n        return\\n            rewardPerTokenStored +\\n            (((block.timestamp - lastUpdateTime) * rewardRate * 1e18) /\\n                _totalSupply);\\n    }\\n\\n    function getStakedAmount(address _user) public view returns (uint256) {\\n        return staked[_user];\\n    }\\n\\n    /**\\n     * @dev - to calculate the earned rewards for a user based on the amount of tokens staked\\n     * @param _account - the address of the user\\n     * @return uint256 - the amount of rewards earned\\n     */\\n\\n    function rewardEarned(address _account) public view returns (uint256) {\\n        return\\n            ((staked[_account] *\\n                (rewardPerToken() - userRewardPerTokenPaid[_account])) / 1e18) +\\n            rewards[_account];\\n    }\\n\\n    function claimReward(address _user) external updateReward(msg.sender) {\\n        uint256 reward = rewards[_user];\\n        if (reward > 0) {\\n            rewards[_user] = 0;\\n            rewardToken.transfer(_user, reward);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xda0a39d5be754d2a310f882fc0ec7ee4266887ccfe54becd5c528c9e7e0e2f91\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\ninterface IERC20 {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function decimals() external view returns (uint256);\\n\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    function allowance(\\n        address _owner,\\n        address _spender\\n    ) external view returns (uint256);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x239f47b2f966a01ac0f60503dec17b3d50e7bd5aaaea4f3fe8c79909d9da3f90\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x608060405260646003556006805460ff1916905534801561001f57600080fd5b506040516107cd3803806107cd83398101604081905261003e9161008b565b600180546001600160a01b039384166001600160a01b031991821617909155600080549290931691161790556100be565b80516001600160a01b038116811461008657600080fd5b919050565b6000806040838503121561009e57600080fd5b6100a78361006f565b91506100b56020840161006f565b90509250929050565b610700806100cd6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80639ee3060011610097578063d279c19111610066578063d279c19114610216578063df136d6514610229578063efb48f7c14610232578063f7c618c11461024f57600080fd5b80639ee30600146101dd578063be4b1772146101f2578063c8f33c9114610205578063cd3daf9d1461020e57600080fd5b806372f702f3116100d357806372f702f3146101695780637b0a47ee146101945780638b8763471461019d57806398807d84146101bd57600080fd5b80630700037d146100fa57806316ba6bf31461012d5780634da6a55614610140575b600080fd5b61011a6101083660046105e5565b60076020526000908152604090205481565b6040519081526020015b60405180910390f35b61011a61013b3660046105e5565b610262565b61011a61014e3660046105e5565b6001600160a01b031660009081526009602052604090205490565b60015461017c906001600160a01b031681565b6040516001600160a01b039091168152602001610124565b61011a60035481565b61011a6101ab3660046105e5565b60086020526000908152604090205481565b61011a6101cb3660046105e5565b60096020526000908152604090205481565b6101f06101eb366004610607565b6102df565b005b6101f0610200366004610607565b6103b6565b61011a60045481565b61011a610486565b6101f06102243660046105e5565b6104e4565b61011a60055481565b60065461023f9060ff1681565b6040519015158152602001610124565b60005461017c906001600160a01b031681565b6001600160a01b0381166000908152600760209081526040808320546008909252822054670de0b6b3a764000090610298610486565b6102a29190610649565b6001600160a01b0385166000908152600960205260409020546102c5919061065c565b6102cf9190610673565b6102d99190610695565b92915050565b806102e8610486565b600555426004556102f881610262565b6001600160a01b0382166000908152600760209081526040808320939093556005546008909152919020558261036d5760405162461bcd60e51b815260206004820152601560248201527443616e6e6f74207374616b65203020746f6b656e7360581b60448201526064015b60405180910390fd5b826002600082825461037f9190610695565b90915550506001600160a01b038216600090815260096020526040812080548592906103ac908490610695565b9091555050505050565b806103bf610486565b600555426004556103cf81610262565b6001600160a01b038216600090815260076020908152604080832093909355600554600890915291902055826104475760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f74207769746864726177203020746f6b656e7300000000000000006044820152606401610364565b82600260008282546104599190610649565b90915550506001600160a01b038216600090815260096020526040812080548592906103ac908490610649565b6000600254600003610499575060055490565b6002546003546004546104ac9042610649565b6104b6919061065c565b6104c890670de0b6b3a764000061065c565b6104d29190610673565b6005546104df9190610695565b905090565b336104ed610486565b600555426004556104fd81610262565b6001600160a01b0380831660009081526007602081815260408084209590955560055460088252858420559286168252909152205480156105c4576001600160a01b038381166000818152600760205260408082208290559054905163a9059cbb60e01b81526004810192909252602482018490529091169063a9059cbb906044016020604051808303816000875af115801561059e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c291906106a8565b505b505050565b80356001600160a01b03811681146105e057600080fd5b919050565b6000602082840312156105f757600080fd5b610600826105c9565b9392505050565b6000806040838503121561061a57600080fd5b8235915061062a602084016105c9565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b818103818111156102d9576102d9610633565b80820281158282048414176102d9576102d9610633565b60008261069057634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156102d9576102d9610633565b6000602082840312156106ba57600080fd5b8151801515811461060057600080fdfea2646970667358221220f4f645d68a609301303c641b2c73f7d6bc508f4f409abddd2d3985b18b82b6c664736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80639ee3060011610097578063d279c19111610066578063d279c19114610216578063df136d6514610229578063efb48f7c14610232578063f7c618c11461024f57600080fd5b80639ee30600146101dd578063be4b1772146101f2578063c8f33c9114610205578063cd3daf9d1461020e57600080fd5b806372f702f3116100d357806372f702f3146101695780637b0a47ee146101945780638b8763471461019d57806398807d84146101bd57600080fd5b80630700037d146100fa57806316ba6bf31461012d5780634da6a55614610140575b600080fd5b61011a6101083660046105e5565b60076020526000908152604090205481565b6040519081526020015b60405180910390f35b61011a61013b3660046105e5565b610262565b61011a61014e3660046105e5565b6001600160a01b031660009081526009602052604090205490565b60015461017c906001600160a01b031681565b6040516001600160a01b039091168152602001610124565b61011a60035481565b61011a6101ab3660046105e5565b60086020526000908152604090205481565b61011a6101cb3660046105e5565b60096020526000908152604090205481565b6101f06101eb366004610607565b6102df565b005b6101f0610200366004610607565b6103b6565b61011a60045481565b61011a610486565b6101f06102243660046105e5565b6104e4565b61011a60055481565b60065461023f9060ff1681565b6040519015158152602001610124565b60005461017c906001600160a01b031681565b6001600160a01b0381166000908152600760209081526040808320546008909252822054670de0b6b3a764000090610298610486565b6102a29190610649565b6001600160a01b0385166000908152600960205260409020546102c5919061065c565b6102cf9190610673565b6102d99190610695565b92915050565b806102e8610486565b600555426004556102f881610262565b6001600160a01b0382166000908152600760209081526040808320939093556005546008909152919020558261036d5760405162461bcd60e51b815260206004820152601560248201527443616e6e6f74207374616b65203020746f6b656e7360581b60448201526064015b60405180910390fd5b826002600082825461037f9190610695565b90915550506001600160a01b038216600090815260096020526040812080548592906103ac908490610695565b9091555050505050565b806103bf610486565b600555426004556103cf81610262565b6001600160a01b038216600090815260076020908152604080832093909355600554600890915291902055826104475760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f74207769746864726177203020746f6b656e7300000000000000006044820152606401610364565b82600260008282546104599190610649565b90915550506001600160a01b038216600090815260096020526040812080548592906103ac908490610649565b6000600254600003610499575060055490565b6002546003546004546104ac9042610649565b6104b6919061065c565b6104c890670de0b6b3a764000061065c565b6104d29190610673565b6005546104df9190610695565b905090565b336104ed610486565b600555426004556104fd81610262565b6001600160a01b0380831660009081526007602081815260408084209590955560055460088252858420559286168252909152205480156105c4576001600160a01b038381166000818152600760205260408082208290559054905163a9059cbb60e01b81526004810192909252602482018490529091169063a9059cbb906044016020604051808303816000875af115801561059e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c291906106a8565b505b505050565b80356001600160a01b03811681146105e057600080fd5b919050565b6000602082840312156105f757600080fd5b610600826105c9565b9392505050565b6000806040838503121561061a57600080fd5b8235915061062a602084016105c9565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b818103818111156102d9576102d9610633565b80820281158282048414176102d9576102d9610633565b60008261069057634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156102d9576102d9610633565b6000602082840312156106ba57600080fd5b8151801515811461060057600080fdfea2646970667358221220f4f645d68a609301303c641b2c73f7d6bc508f4f409abddd2d3985b18b82b6c664736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "rewardEarned(address)": {
        "details": "- to calculate the earned rewards for a user based on the amount of tokens staked",
        "params": {
          "_account": "- the address of the user"
        },
        "returns": {
          "_0": "uint256 - the amount of rewards earned"
        }
      },
      "rewardPerToken()": {
        "details": "- To calculuate the amount of rewards per token staked",
        "returns": {
          "_0": "uint256 - The amount of rewards per token staked"
        }
      },
      "stakeToken(uint256,address)": {
        "details": "- to stake tokens into the pool",
        "params": {
          "_amount": "- the amount of tokens to stake"
        }
      },
      "withdrawToken(uint256,address)": {
        "details": "- to withdraw tokens from the pool",
        "params": {
          "_amount": "- the amount of tokens to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1759,
        "contract": "contracts/core/StakingPool.sol:StakingPool",
        "label": "rewardToken",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)4387"
      },
      {
        "astId": 1762,
        "contract": "contracts/core/StakingPool.sol:StakingPool",
        "label": "stakingToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)4387"
      },
      {
        "astId": 1764,
        "contract": "contracts/core/StakingPool.sol:StakingPool",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1767,
        "contract": "contracts/core/StakingPool.sol:StakingPool",
        "label": "rewardRate",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1769,
        "contract": "contracts/core/StakingPool.sol:StakingPool",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1771,
        "contract": "contracts/core/StakingPool.sol:StakingPool",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1774,
        "contract": "contracts/core/StakingPool.sol:StakingPool",
        "label": "rewardRateSet",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 1778,
        "contract": "contracts/core/StakingPool.sol:StakingPool",
        "label": "rewards",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1782,
        "contract": "contracts/core/StakingPool.sol:StakingPool",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1786,
        "contract": "contracts/core/StakingPool.sol:StakingPool",
        "label": "staked",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)4387": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}