{
  "address": "0x5b6a36F901d5E30fbE599d37C71175691f8038C7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPoolsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "createPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5a9cd01f24009a9292b7a8140812dfd1e2224f39b73f81dd6d62abb053ee169f",
  "receipt": {
    "to": null,
    "from": "0x6FC5113b55771b884880785042e78521B8b719fa",
    "contractAddress": "0x5b6a36F901d5E30fbE599d37C71175691f8038C7",
    "transactionIndex": 146,
    "gasUsed": "788620",
    "logsBloom": "0x
    "blockHash": "0x77f730829ecdf0db24691bc98bca934e2c8a9229743b92dea3b2917c94c33e1c",
    "transactionHash": "0x5a9cd01f24009a9292b7a8140812dfd1e2224f39b73f81dd6d62abb053ee169f",
    "logs": [],
    "blockNumber": 4444344,
    "cumulativeGasUsed": "19921109",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6FC5113b55771b884880785042e78521B8b719fa"
  ],
  "numDeployments": 1,
  "solcInputHash": "70e7fbd1393d4e3a7cd4b14504da2c6a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPoolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createPool(address,address)\":{\"details\":\"- Creates a new pool for the given token pair- assembly is used to create the pool contract with the CREATE2 opcode\",\"params\":{\"_rewardToken\":\"- the token that will be rewarded\",\"_stakingToken\":\"- the token that will be staked\"},\"returns\":{\"pool\":\"- the address of the pool that was created\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factory/StakingPoolFactory.sol\":\"StakingPoolFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/StakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\ncontract StakingPool {\\n    IERC20 public rewardToken;\\n    IERC20 public stakingToken;\\n    uint256 private _totalSupply;\\n    uint256 public rewardRate = 100;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n\\n    mapping(address => uint256) public rewards;\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public staked;\\n\\n    /// @dev - modifier that will calculate the amount of rewards earned and add it to the rewards mapping\\n    modifier updateReward(address _account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = block.timestamp;\\n        rewards[_account] = rewardEarned(_account);\\n        userRewardPerTokenPaid[_account] = rewardPerTokenStored;\\n        _;\\n    }\\n\\n    constructor(address _stakingToken, address _rewardToken) {\\n        stakingToken = IERC20(_stakingToken);\\n        rewardToken = IERC20(_rewardToken);\\n    }\\n\\n    /// @dev - to stake tokens into the pool\\n    /// @param _amount - the amount of tokens to stake\\n    function stakeToken(\\n        uint256 _amount,\\n        address _user\\n    ) external updateReward(_user) {\\n        require(_amount > 0, \\\"Cannot stake 0 tokens\\\");\\n        _totalSupply += _amount;\\n        staked[_user] += _amount;\\n    }\\n\\n    /// @dev - to withdraw tokens from the pool\\n    /// @param _amount - the amount of tokens to withdraw\\n    function withdrawToken(\\n        uint256 _amount,\\n        address _user\\n    ) external updateReward(_user) {\\n        require(_amount > 0, \\\"Cannot withdraw 0 tokens\\\");\\n        _totalSupply -= _amount;\\n        staked[_user] -= _amount;\\n    }\\n\\n    /// @dev - To calculuate the amount of rewards per token staked\\n    /// @return uint256 - The amount of rewards per token staked\\n    function rewardPerToken() public view returns (uint256) {\\n        if (_totalSupply == 0) {\\n            return rewardPerTokenStored;\\n        }\\n\\n        return\\n            rewardPerTokenStored +\\n            (((block.timestamp - lastUpdateTime) * rewardRate * 1e18) /\\n                _totalSupply);\\n    }\\n\\n    function getStakedAmount(address _user) public view returns (uint256) {\\n        return staked[_user];\\n    }\\n\\n    /**\\n     * @dev - to calculate the earned rewards for a user based on the amount of tokens staked\\n     * @param _account - the address of the user\\n     * @return uint256 - the amount of rewards earned\\n     */\\n\\n    function rewardEarned(address _account) public view returns (uint256) {\\n        return\\n            ((staked[_account] *\\n                (rewardPerToken() - userRewardPerTokenPaid[_account])) / 1e18) +\\n            rewards[_account];\\n    }\\n\\n    function claimReward(address _user) external updateReward(msg.sender) {\\n        uint256 reward = rewards[_user];\\n\\n        rewards[_user] = 0;\\n        rewardToken.transfer(_user, reward);\\n    }\\n}\\n\",\"keccak256\":\"0x9745ff3f2d408c39cef9bba43da6e968b492c67fad01503abe2c12a9b7b319ef\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/factory/StakingPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\nimport \\\"../core/StakingPool.sol\\\";\\n\\ncontract StakingPoolFactory {\\n    address public feeTo;\\n    address public feeToSetter;\\n    address[] public allPools;\\n\\n    mapping(address => address) public getPool;\\n\\n    event PoolCreated(address indexed token, address pool, uint256 timestamp);\\n\\n    constructor(address _feeToSetter) {\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    function allPoolsLength() external view returns (uint256) {\\n        return allPools.length;\\n    }\\n\\n    /**\\n     * @dev - Creates a new pool for the given token pair\\n     * @dev - assembly is used to create the pool contract with the CREATE2 opcode\\n     * @param _stakingToken - the token that will be staked\\n     * @param _rewardToken  - the token that will be rewarded\\n     * @return pool - the address of the pool that was created\\n     *\\n     */\\n\\n    function createPool(\\n        address _stakingToken,\\n        address _rewardToken\\n    ) external returns (address pool) {\\n        require(\\n            getPool[_stakingToken] == address(0),\\n            \\\"StakingPoolFactory::createPool: Pool already exists\\\"\\n        );\\n        require(\\n            _stakingToken != address(0),\\n            \\\"StakingPoolFactory::createPool: Invalid staking token\\\"\\n        );\\n\\n        StakingPool _pool = new StakingPool(_stakingToken, _rewardToken);\\n\\n        getPool[_stakingToken] = address(_pool);\\n        allPools.push(address(_pool));\\n        emit PoolCreated(_stakingToken, address(_pool), block.timestamp);\\n\\n        return address(_pool);\\n    }\\n\\n    function setFeeTo(address _feeTo) external {\\n        require(\\n            msg.sender == feeToSetter,\\n            \\\"StakingPoolFactory::setFeeTo: FORBIDDEN\\\"\\n        );\\n        feeTo = _feeTo;\\n    }\\n\\n    function setFeeToSetter(address _feeToSetter) external {\\n        require(\\n            msg.sender == feeToSetter,\\n            \\\"StakingPoolFactory::setFeeToSetter: FORBIDDEN\\\"\\n        );\\n        feeToSetter = _feeToSetter;\\n    }\\n}\\n\",\"keccak256\":\"0x391ec826bbaff8c94552fdf5bdd760b7c683b197be547dcd22e3a21a83463162\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.19;\\n\\ninterface IERC20 {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function decimals() external view returns (uint256);\\n\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    function allowance(\\n        address _owner,\\n        address _spender\\n    ) external view returns (uint256);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x239f47b2f966a01ac0f60503dec17b3d50e7bd5aaaea4f3fe8c79909d9da3f90\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610d70380380610d7083398101604081905261002f91610054565b600180546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610cdd806100936000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063bbe4f6db1161005b578063bbe4f6db146100f8578063e343361514610121578063efde4e6414610134578063f46901ed1461014557600080fd5b8063017e7e581461008d578063094b7415146100bd57806341d1de97146100d0578063a2e74af6146100e3575b600080fd5b6000546100a0906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6001546100a0906001600160a01b031681565b6100a06100de36600461049c565b610158565b6100f66100f13660046104d1565b610182565b005b6100a06101063660046104d1565b6003602052600090815260409020546001600160a01b031681565b6100a061012f3660046104f3565b610219565b6002546040519081526020016100b4565b6100f66101533660046104d1565b610403565b6002818154811061016857600080fd5b6000918252602090912001546001600160a01b0316905081565b6001546001600160a01b031633146101f75760405162461bcd60e51b815260206004820152602d60248201527f5374616b696e67506f6f6c466163746f72793a3a736574466565546f5365747460448201526c32b91d102327a92124a22222a760991b60648201526084015b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038281166000908152600360205260408120549091161561029f5760405162461bcd60e51b815260206004820152603360248201527f5374616b696e67506f6f6c466163746f72793a3a637265617465506f6f6c3a20604482015272506f6f6c20616c72656164792065786973747360681b60648201526084016101ee565b6001600160a01b0383166103135760405162461bcd60e51b815260206004820152603560248201527f5374616b696e67506f6f6c466163746f72793a3a637265617465506f6f6c3a2060448201527424b73b30b634b21039ba30b5b4b733903a37b5b2b760591b60648201526084016101ee565b600083836040516103239061048f565b6001600160a01b03928316815291166020820152604001604051809103906000f080158015610356573d6000803e3d6000fd5b506001600160a01b03858116600081815260036020908152604080832080549587166001600160a01b031996871681179091556002805460018101825594527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace9093018054909516831790945583519182524290820152929350917ff8a0462f666b427ea753848be7e91f9ce413975906f6f39950be296ca9a4d524910160405180910390a29392505050565b6001546001600160a01b0316331461046d5760405162461bcd60e51b815260206004820152602760248201527f5374616b696e67506f6f6c466163746f72793a3a736574466565546f3a20464f604482015266292124a22222a760c91b60648201526084016101ee565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6107818061052783390190565b6000602082840312156104ae57600080fd5b5035919050565b80356001600160a01b03811681146104cc57600080fd5b919050565b6000602082840312156104e357600080fd5b6104ec826104b5565b9392505050565b6000806040838503121561050657600080fd5b61050f836104b5565b915061051d602084016104b5565b9050925092905056fe6080604052606460035534801561001557600080fd5b5060405161078138038061078183398101604081905261003491610081565b600180546001600160a01b039384166001600160a01b031991821617909155600080549290931691161790556100b4565b80516001600160a01b038116811461007c57600080fd5b919050565b6000806040838503121561009457600080fd5b61009d83610065565b91506100ab60208401610065565b90509250929050565b6106be806100c36000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80639ee306001161008c578063cd3daf9d11610066578063cd3daf9d14610203578063d279c1911461020b578063df136d651461021e578063f7c618c11461022757600080fd5b80639ee30600146101d2578063be4b1772146101e7578063c8f33c91146101fa57600080fd5b806372f702f3116100c857806372f702f31461015e5780637b0a47ee146101895780638b8763471461019257806398807d84146101b257600080fd5b80630700037d146100ef57806316ba6bf3146101225780634da6a55614610135575b600080fd5b61010f6100fd3660046105a3565b60066020526000908152604090205481565b6040519081526020015b60405180910390f35b61010f6101303660046105a3565b61023a565b61010f6101433660046105a3565b6001600160a01b031660009081526008602052604090205490565b600154610171906001600160a01b031681565b6040516001600160a01b039091168152602001610119565b61010f60035481565b61010f6101a03660046105a3565b60076020526000908152604090205481565b61010f6101c03660046105a3565b60086020526000908152604090205481565b6101e56101e03660046105c5565b6102b7565b005b6101e56101f53660046105c5565b61038e565b61010f60045481565b61010f61045e565b6101e56102193660046105a3565b6104bc565b61010f60055481565b600054610171906001600160a01b031681565b6001600160a01b0381166000908152600660209081526040808320546007909252822054670de0b6b3a76400009061027061045e565b61027a9190610607565b6001600160a01b03851660009081526008602052604090205461029d919061061a565b6102a79190610631565b6102b19190610653565b92915050565b806102c061045e565b600555426004556102d08161023a565b6001600160a01b038216600090815260066020908152604080832093909355600554600790915291902055826103455760405162461bcd60e51b815260206004820152601560248201527443616e6e6f74207374616b65203020746f6b656e7360581b60448201526064015b60405180910390fd5b82600260008282546103579190610653565b90915550506001600160a01b03821660009081526008602052604081208054859290610384908490610653565b9091555050505050565b8061039761045e565b600555426004556103a78161023a565b6001600160a01b0382166000908152600660209081526040808320939093556005546007909152919020558261041f5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f74207769746864726177203020746f6b656e730000000000000000604482015260640161033c565b82600260008282546104319190610607565b90915550506001600160a01b03821660009081526008602052604081208054859290610384908490610607565b6000600254600003610471575060055490565b6002546003546004546104849042610607565b61048e919061061a565b6104a090670de0b6b3a764000061061a565b6104aa9190610631565b6005546104b79190610653565b905090565b336104c561045e565b600555426004556104d58161023a565b6001600160a01b0382811660009081526006602081815260408084209590955560055460078252858420558684168084529190528382208054908390559154935163a9059cbb60e01b815260048101919091526024810182905290929091169063a9059cbb906044016020604051808303816000875af115801561055d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105819190610666565b50505050565b80356001600160a01b038116811461059e57600080fd5b919050565b6000602082840312156105b557600080fd5b6105be82610587565b9392505050565b600080604083850312156105d857600080fd5b823591506105e860208401610587565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b818103818111156102b1576102b16105f1565b80820281158282048414176102b1576102b16105f1565b60008261064e57634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156102b1576102b16105f1565b60006020828403121561067857600080fd5b815180151581146105be57600080fdfea2646970667358221220a47471e2c263be86b20eb545e14921b312c1928241497ac76eec03acddffd89e64736f6c63430008130033a2646970667358221220094d5a6a542d43d34cb8b76c537971e23cca8c31bb792dfc71e48a145cd8fc3264736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063bbe4f6db1161005b578063bbe4f6db146100f8578063e343361514610121578063efde4e6414610134578063f46901ed1461014557600080fd5b8063017e7e581461008d578063094b7415146100bd57806341d1de97146100d0578063a2e74af6146100e3575b600080fd5b6000546100a0906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6001546100a0906001600160a01b031681565b6100a06100de36600461049c565b610158565b6100f66100f13660046104d1565b610182565b005b6100a06101063660046104d1565b6003602052600090815260409020546001600160a01b031681565b6100a061012f3660046104f3565b610219565b6002546040519081526020016100b4565b6100f66101533660046104d1565b610403565b6002818154811061016857600080fd5b6000918252602090912001546001600160a01b0316905081565b6001546001600160a01b031633146101f75760405162461bcd60e51b815260206004820152602d60248201527f5374616b696e67506f6f6c466163746f72793a3a736574466565546f5365747460448201526c32b91d102327a92124a22222a760991b60648201526084015b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038281166000908152600360205260408120549091161561029f5760405162461bcd60e51b815260206004820152603360248201527f5374616b696e67506f6f6c466163746f72793a3a637265617465506f6f6c3a20604482015272506f6f6c20616c72656164792065786973747360681b60648201526084016101ee565b6001600160a01b0383166103135760405162461bcd60e51b815260206004820152603560248201527f5374616b696e67506f6f6c466163746f72793a3a637265617465506f6f6c3a2060448201527424b73b30b634b21039ba30b5b4b733903a37b5b2b760591b60648201526084016101ee565b600083836040516103239061048f565b6001600160a01b03928316815291166020820152604001604051809103906000f080158015610356573d6000803e3d6000fd5b506001600160a01b03858116600081815260036020908152604080832080549587166001600160a01b031996871681179091556002805460018101825594527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace9093018054909516831790945583519182524290820152929350917ff8a0462f666b427ea753848be7e91f9ce413975906f6f39950be296ca9a4d524910160405180910390a29392505050565b6001546001600160a01b0316331461046d5760405162461bcd60e51b815260206004820152602760248201527f5374616b696e67506f6f6c466163746f72793a3a736574466565546f3a20464f604482015266292124a22222a760c91b60648201526084016101ee565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6107818061052783390190565b6000602082840312156104ae57600080fd5b5035919050565b80356001600160a01b03811681146104cc57600080fd5b919050565b6000602082840312156104e357600080fd5b6104ec826104b5565b9392505050565b6000806040838503121561050657600080fd5b61050f836104b5565b915061051d602084016104b5565b9050925092905056fe6080604052606460035534801561001557600080fd5b5060405161078138038061078183398101604081905261003491610081565b600180546001600160a01b039384166001600160a01b031991821617909155600080549290931691161790556100b4565b80516001600160a01b038116811461007c57600080fd5b919050565b6000806040838503121561009457600080fd5b61009d83610065565b91506100ab60208401610065565b90509250929050565b6106be806100c36000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80639ee306001161008c578063cd3daf9d11610066578063cd3daf9d14610203578063d279c1911461020b578063df136d651461021e578063f7c618c11461022757600080fd5b80639ee30600146101d2578063be4b1772146101e7578063c8f33c91146101fa57600080fd5b806372f702f3116100c857806372f702f31461015e5780637b0a47ee146101895780638b8763471461019257806398807d84146101b257600080fd5b80630700037d146100ef57806316ba6bf3146101225780634da6a55614610135575b600080fd5b61010f6100fd3660046105a3565b60066020526000908152604090205481565b6040519081526020015b60405180910390f35b61010f6101303660046105a3565b61023a565b61010f6101433660046105a3565b6001600160a01b031660009081526008602052604090205490565b600154610171906001600160a01b031681565b6040516001600160a01b039091168152602001610119565b61010f60035481565b61010f6101a03660046105a3565b60076020526000908152604090205481565b61010f6101c03660046105a3565b60086020526000908152604090205481565b6101e56101e03660046105c5565b6102b7565b005b6101e56101f53660046105c5565b61038e565b61010f60045481565b61010f61045e565b6101e56102193660046105a3565b6104bc565b61010f60055481565b600054610171906001600160a01b031681565b6001600160a01b0381166000908152600660209081526040808320546007909252822054670de0b6b3a76400009061027061045e565b61027a9190610607565b6001600160a01b03851660009081526008602052604090205461029d919061061a565b6102a79190610631565b6102b19190610653565b92915050565b806102c061045e565b600555426004556102d08161023a565b6001600160a01b038216600090815260066020908152604080832093909355600554600790915291902055826103455760405162461bcd60e51b815260206004820152601560248201527443616e6e6f74207374616b65203020746f6b656e7360581b60448201526064015b60405180910390fd5b82600260008282546103579190610653565b90915550506001600160a01b03821660009081526008602052604081208054859290610384908490610653565b9091555050505050565b8061039761045e565b600555426004556103a78161023a565b6001600160a01b0382166000908152600660209081526040808320939093556005546007909152919020558261041f5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f74207769746864726177203020746f6b656e730000000000000000604482015260640161033c565b82600260008282546104319190610607565b90915550506001600160a01b03821660009081526008602052604081208054859290610384908490610607565b6000600254600003610471575060055490565b6002546003546004546104849042610607565b61048e919061061a565b6104a090670de0b6b3a764000061061a565b6104aa9190610631565b6005546104b79190610653565b905090565b336104c561045e565b600555426004556104d58161023a565b6001600160a01b0382811660009081526006602081815260408084209590955560055460078252858420558684168084529190528382208054908390559154935163a9059cbb60e01b815260048101919091526024810182905290929091169063a9059cbb906044016020604051808303816000875af115801561055d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105819190610666565b50505050565b80356001600160a01b038116811461059e57600080fd5b919050565b6000602082840312156105b557600080fd5b6105be82610587565b9392505050565b600080604083850312156105d857600080fd5b823591506105e860208401610587565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b818103818111156102b1576102b16105f1565b80820281158282048414176102b1576102b16105f1565b60008261064e57634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156102b1576102b16105f1565b60006020828403121561067857600080fd5b815180151581146105be57600080fdfea2646970667358221220a47471e2c263be86b20eb545e14921b312c1928241497ac76eec03acddffd89e64736f6c63430008130033a2646970667358221220094d5a6a542d43d34cb8b76c537971e23cca8c31bb792dfc71e48a145cd8fc3264736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createPool(address,address)": {
        "details": "- Creates a new pool for the given token pair- assembly is used to create the pool contract with the CREATE2 opcode",
        "params": {
          "_rewardToken": "- the token that will be rewarded",
          "_stakingToken": "- the token that will be staked"
        },
        "returns": {
          "pool": "- the address of the pool that was created"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3836,
        "contract": "contracts/factory/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "feeTo",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3838,
        "contract": "contracts/factory/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3841,
        "contract": "contracts/factory/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "allPools",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3845,
        "contract": "contracts/factory/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "getPool",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}